<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-06-02T22:08:40+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[性能优化:Trove集合库]]></title>
    <link href="http://mccxj.github.com/blog/20130602_introduce-to-trove.html"/>
    <updated>2013-06-02T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/introduce-to-trove</id>
    <content type="html"><![CDATA[<h2>1 初见Trove</h2>

<p>昨天在<a href="http://news.dbanotes.net/news">Startup News</a>上看到一篇文章:<a href="http://blog.jobbole.com/40666/">优化技巧分享：把内存消耗降低至原来的1/20</a>。里边提到了一个案例，Java应用中如何降低内存消耗，总结了他的优化过程:</p>

<ul>
<li>开始时,存放1.3M个Person对象，消耗堆空间1.5GB</li>
<li>修改为java.util.HashMap&lt;Long, Person>进行缓存,从1.5GB降低为214MB</li>
<li>修改HashMap为Trove的TLongObjectHashMap<Person>，从214MB降低为143MB</li>
<li>优化Person内部结构,减少重复字段,从143MB降低为93MB</li>
<li>开启64位JDK的XX:UseCompressedOops参数进行指针压缩,从93MB降低为73MB</li>
</ul>


<p>优化经常得针对具体的场景、数据特性来优化，上述提到的<a href="http://trove.starlight-systems.com/">Trove</a>集合库就是这么一个典型例子,它针对的是JDK集合类中处理原生类型的场景。</p>

<h2>2 使用Trove</h2>

<ul>
<li>如果使用Maven的话,可使用下面的配置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>net.sf.trove4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>trove4j<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>3.0.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>常用方法和JDK集合类是一样的，方便迁移</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TIntObjectMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TIntObjectHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">&quot;Tom&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ints</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trove相当于把JDK集合类都针对原生类型处理了一遍，例如int，常见的类有
TIntList、TIntObjectMap<V>、TObjectIntMap<K>、TIntSet，可想而知，<strong>维护Trove的工作量是挺大的</strong>。</p>

<p>Trove还提供了开放寻址法的Map,Set,LinkedList实现,可以参考<a href="http://www.onjava.com/pub/a/onjava/2002/06/12/trove.html?page=2">Enhance Collection Performance with this Treasure Trove</a>的做法,类似于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CollectionFactory</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">useTrove</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">  *  Return a hashmap based on the properties</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Map</span> <span class="nf">getHashMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> <span class="n">useTrove</span> <span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">THashMap</span><span class="o">();</span>
</span><span class='line'>      <span class="k">else</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  *  Return a hashset based on the properties</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Set</span> <span class="nf">getHashSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> <span class="n">useTrove</span> <span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">THashSet</span><span class="o">();</span>
</span><span class='line'>      <span class="k">else</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">HashSet</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  *  Return a linkedlist based on the properties</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span> <span class="nf">getLinkedList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> <span class="n">useTrove</span> <span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">TLinkedList</span><span class="o">();</span>
</span><span class='line'>      <span class="k">else</span>            <span class="k">return</span> <span class="k">new</span> <span class="nf">LinkedList</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>迭代集合中的元素</li>
</ul>


<p><strong>Trove不推荐JDK的entryXX的做法，而是采用了forEach的回调方式</strong>。
代码显得更好看些，另外内存方面也有优势，因为使用entryXX的做法，需要创建一个新的数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TIntObjectMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TIntObjectHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">&quot;Tom&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">forEachEntry</span><span class="o">(</span><span class="k">new</span> <span class="n">TIntObjectProcedure</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">execute</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;key: &quot;</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;, val: &quot;</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">forEachKey</span><span class="o">(</span><span class="k">new</span> <span class="n">TIntProcedure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">execute</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;key: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">ints</span><span class="o">.</span><span class="na">forEachValue</span><span class="o">(</span><span class="k">new</span> <span class="n">TObjectProcedure</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">execute</span><span class="o">(</span><span class="n">String</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;val: &quot;</span> <span class="o">+</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>自定义Hash策略</li>
</ul>


<p>我们知道，在JDK集合类里边，有时候是没法自定义Hash策略的，例如String。
<strong>不过Trove提供了自定义Hash策略的功能，让你可以根据数据特性进行优化</strong>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">[]</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[]{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span> <span class="sc">&#39;b&#39;</span><span class="o">,</span> <span class="sc">&#39;c&#39;</span><span class="o">};</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">[]</span> <span class="n">bar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[]{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span> <span class="sc">&#39;b&#39;</span><span class="o">,</span> <span class="sc">&#39;c&#39;</span><span class="o">};</span>
</span><span class='line'>    <span class="n">TCustomHashMap</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">[],</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">ch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TCustomHashMap</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">[],</span> <span class="n">String</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">CharArrayStrategy</span><span class="o">());</span>
</span><span class='line'>    <span class="n">ch</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">foo</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ch</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">bar</span><span class="o">,</span> <span class="s">&quot;Tom&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">CharArrayStrategy</span> <span class="kd">implements</span> <span class="n">HashingStrategy</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">[]&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">computeHashCode</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// use the shift-add-xor class of string hashing functions</span>
</span><span class='line'>        <span class="c1">// cf. Ramakrishna and Zobel, &quot;Performance in Practice</span>
</span><span class='line'>        <span class="c1">// of String Hashing Functions&quot;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span> <span class="c1">// seed chosen at random</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// could skip invariants</span>
</span><span class='line'>            <span class="n">h</span> <span class="o">=</span> <span class="n">h</span> <span class="o">^</span> <span class="o">((</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span> <span class="c1">// L=5, R=2 works well for</span>
</span><span class='line'>                                                  <span class="c1">// ASCII input</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">c1</span><span class="o">,</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">c2</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// could drop this check for fixed-length</span>
</span><span class='line'>                                      <span class="c1">// keys</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">=</span> <span class="n">c1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// could skip</span>
</span><span class='line'>                                                         <span class="c1">// invariants</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">c1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">c2</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3 Trove内幕</h2>

<p>Trove是以减少内存消耗为主要目的的，同时也要保持性能。我们这里简单描述一下Trove的实现内幕。
这里有有另外一篇文章可以参考：<a href="http://www.ibm.com/developerworks/cn/java/j-perf09284.html">性能观察: Trove 集合类</a></p>

<ul>
<li>直接使用原生类型,而不是包装类型</li>
</ul>


<p>JDK5的自动封箱机制，让我们可以暂时忽略原生类型和包准类型的区别。自动封箱机制只是一种语法糖，实际上并没有提高效率。
直接使用原生类型替代包装类型，明显可以占用更小的内存、运行起来也更有效率。对于基本类型的集合组合，Trove都提供了
等价的集合类。</p>

<ul>
<li>使用开放寻址法，而不是链地址法</li>
</ul>


<p>大多数的JDK集合类都是采用链地址法实现的，它需要一个地址表，并且元素之间需要链表结点，而Trove采用开放寻址法，
虽然需要保持足够的空闲位置(装载因子小于0.5),但因为不需要链表结点，所以总体上内存占用要更少，性能还要更快一些。</p>

<ul>
<li>HashSet不再通过内置HashMap实现</li>
</ul>


<p>JDK的HashSet是通过内置一个HashSet来实现的，所以白白浪费了value的空间。
Trove提供的THashSet和其他基本类型的HashSet,都不再采用这种方式，直接使用开放地址存储。</p>

<ul>
<li>采用素数长度大小的数组</li>
</ul>


<p>为了最大程度避免hash冲突，除了保持较小的装载因子，还采用了素数长度大小的数组。具体见gnu.trove.impl.PrimeFinder</p>

<ul>
<li>采用代码生成进行维护</li>
</ul>


<p>虽然这个和性能没什么关系。但是我们也知道要维护这么多的原生类型集合类，重复的逻辑多但没法重用，是个很纠结的事情。
Trove采用代码模板，生成大量的类，通过这种方式，可以大大减少维护的工作量。</p>

<h2>4 总结</h2>

<p>JDK作为通用集合类，大多数情况下我们还是会优先选择的。不过，在一些性能敏感的地方，或者Trove可以提供更好的选择。
作为靠谱的java开发人员，Trove应该像apache commons、google guava那样，存放在你的工具箱里边。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web开发利器-Fiddler简介]]></title>
    <link href="http://mccxj.github.com/blog/20130531_introduce-to-fiddler.html"/>
    <updated>2013-05-31T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/introduce-to-fiddler</id>
    <content type="html"><![CDATA[<h2>1 什么是Fiddler?</h2>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image1.png" alt="什么是Fiddler" /></p>

<p>Fiddler是一个http调试代理，以代理服务器的方式，监听系统的Http网络数据流动，
Fiddler可以也可以让你检查所有的http通讯，设置断点，以及Fiddle所有的“进出”的数据。</p>

<p>Fiddler还包含一个简单却功能强大的基于JScript .NET 事件脚本子系统，它可以支持众多的http调试任务。
你是不是曾经疑惑过你的web程序和IE是如何交互的？你是不是遇到过一些奇怪的而你又无法解决的性能瓶颈？
你是不是对那些发送给服务器端的cookie和那些你下载下来的被标记为可缓存的内容感到好奇？
无论你是从事什么开发，哪种语言，只要你想更深入的了解HTTP，这个工具就值得你去了解，它对前端开发工作是很有价值的。</p>

<p>Fiddler官方网站及下载可以在[http://www.fiddler2.com/fiddler2/]找到，安装过程很简单，这里就不介绍了。
同样，Fiddler支持插件扩展，常见插件可以在[http://fiddler2.com/add-on]找到。下面，简单介绍Fiddler的功能和常见应用场景。</p>

<h2>2 Fiddler界面及功能介绍</h2>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image2.png" alt="Fiddler界面及功能介绍" /></p>

<p>Fiddler整个界面布局如上所示，下面再简单介绍一些特殊的概念：</p>

<p>代理模式，支持缓存模式和流模式:</p>

<ul>
<li>缓冲模式(Buffering Mode Fiddler直到HTTP响应完成时才将数据返回给应用程序。
可以控制响应，修改响应数据。但是时序图有时候会出现异常。</li>
<li>流模式(Streaming Mode): Fiddler 会即时将HTTP响应的数据返回给应用程序。
更接近真实浏览器的性能。时序图更准确。但是不能控制响应。</li>
</ul>


<p>断点类型，支持请求断点和响应断点:</p>

<ul>
<li>请求断点: 在向目标服务器发送请求前截获。</li>
<li>响应断点: 在将结果返回到应用程序前截获。此时如果使用的是流模式，则此断点类型将失效。</li>
</ul>


<h2>3 常见案例介绍</h2>

<h3>快速定位问题页面</h3>

<p>有些复杂页面，具有多层嵌套页面或者大量Ajax交互，甚至于模态窗口等，都可能让你无法定位请求路径、问题所在页面等。
借助于Fiddler的请求会话查询功能，可以让你一揽全局，无需逐个页面进行查找。</p>

<p>第一步:使用Ctrl+X清空会话列表，再刷新页面</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image3.png" alt="清空会话列表" /></p>

<p>第二步:使用Ctrl+F弹出搜索框,输入关键字进行查询</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image4.png" alt="弹出搜索框" /></p>

<p>第三步:参看具体会话缩小定位范围</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image5.png" alt="缩小定位范围" /></p>

<p>第四步: 定位到具体请求，进行下一步处理</p>

<p>接下来可以考虑使用AutoResponse进行快速修复验证，或者根据请求路径反查后台逻辑。</p>

<h3>使用AutoResponse快速修复验证</h3>

<p>在日常开发工作中，有时侯会发现测试环境中某个html/css/javascript文件有问题。
我们利用Fiddler可以修改HTTP数据的特性，非常方便的定位问题并进行验证。</p>

<p>第一步:使用Fiddler查看页面的数据流列表，找到js文件保存到本地</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image6.png" alt="保存到本地" /></p>

<p>第二步:创建重定向规则,使用本地文件</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image7.png" alt="使用本地文件" /></p>

<p>第三步:刷新页面,如果看到灰色背景的请求会话，就表示生效了</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image8.png" alt="刷新页面" /></p>

<p>第四步:修改本地文件，进行测试</p>

<p>修改本地文件之后，重新刷新页面,就可以看到修改后的效果了。
这种调试方式不需要发布到线上再验证，避免了修改不成功、对用户造成影响的风险，
而且不需要搭建复杂的开发服务器等开发环境，非常适合快速web调试。</p>

<h3>使用Composer模拟报文发送</h3>

<p>有时候在做一些长流程页面、Web服务接口调试时，为了避免修改后重新发起调用的时间过长，可以通过Composer构造请求报文进行快速测试。
等接口调通之后再进行集成测试，可以有效的提高开发和测试的效率。</p>

<p>第一步:拖拽相应的请求会话到Composer页面，会自动生成请求报文</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image9.png" alt="自动生成请求报文" /></p>

<p>第二步:修改请求报文，然后按Execute进行发送</p>

<p>例如，我去掉Cookie中的JESSIONID，重新发送可以看到多了两次请求会话信息。</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image10.png" alt="修改请求报文" /></p>

<p>第三步:检查响应报文，验证结果</p>

<p>例如: 我去掉Cookie中的JESSIONID，应该会被跳转到登录页面</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image11.png" alt="验证结果" /></p>

<p>除了用来做功能快速调试之外，还可以用来做一些安全方面的测试工作，
例如构造一些xss注入、SQL注入报文，看看应用能否妥善处理。</p>

<h3>观察页面性能</h3>

<p>大多数情况下，一个页面会有好几个请求，除了html页面，还有js/css/图片等。
但是IE等浏览器不能很方便的观察到页面加载的情况，例如每个请求消耗的时间等。
如果使用Fiddler的话，可以使用Statistic视图和Timeline视图，观察页面加载情况，便于定位页面性能瓶颈。</p>

<p>第一步:选择一个或多个请求，根据Statistic视图查看统计时间</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image12.png" alt="查看统计时间" /></p>

<p>第二步: 选择一个或多个请求，根据Timeline视图查看加载流程</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image13.png" alt="查看加载流程" /></p>

<h3>模拟特殊场景</h3>

<p>例如在广东XX项目中，各地市使用的域名是不一样的，有些逻辑根据域名来进行特殊处理。为了模拟这种场景，可以考虑修改本地hosts文件。
不过修改hosts需要重启浏览器，比较麻烦。使用Fiddler的hosts设置功能，就能很方便的模拟。</p>

<p>第一步:选择Tools->HOSTS功能,设置相应的域名映射</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image14.png" alt="设置相应的域名映射" /></p>

<p>第二步:直接使用域名访问,验证功能</p>

<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image15.png" alt="验证功能" /></p>

<p>Fiddler提供大量的规则允许你模拟各类场景，你甚至可以自定义规则，值得大家深入探讨，多实践多思考。例如:</p>

<ul>
<li>通过GZIP压缩，测试性能</li>
<li>模拟Agent测试，查看服务端是否对不同客户端定制响应</li>
<li>模拟慢速网络，测试页面的容错性</li>
<li>禁用缓存，方便调试一些静态文件或测试服务端响应情况</li>
<li>根据一些场景自定义规则</li>
</ul>


<p><img src="http://mccxj.github.com/assets/images/2013/fiddler/image16.png" alt="模拟各类场景" /></p>

<h2>4 总结</h2>

<p>本文简单介绍了Fiddler的常见应用场景。目前，Fiddler在我们项目的团队中广泛使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解RESTFul架构]]></title>
    <link href="http://mccxj.github.com/blog/20130530_introduce-to-rest.html"/>
    <updated>2013-05-30T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/introduce-to-rest</id>
    <content type="html"><![CDATA[<h2>1 什么是REST</h2>

<p>REST全称是Representational State Transfer，中文意思是表述性状态转移。
它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是 HTTP 规范的主要编写者之一。
他在论文中提到:“<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。</strong>”
如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p>

<p>REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力，
更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深，
但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。
所以我们这里描述的REST也是通过HTTP实现的REST。</p>

<h2>2 理解RestFul</h2>

<p>要理解RESTful架构，需要理解Representational State Transfer这个词组到底是什么意思，它的每一个词都有些什么涵义。
下面我们结合REST原则，围绕资源展开讨论，从资源的定义、获取、表述、关联、状态变迁等角度，列举一些关键概念并加以解释:</p>

<ul>
<li>资源与URI</li>
<li>统一资源接口</li>
<li>资源的表述</li>
<li>资源的链接</li>
<li>状态的转移</li>
</ul>


<h3>2.1 资源与URI</h3>

<p>REST全称是表述性状态转移，那究竟指的是什么的表述? 其实指的就是资源。<strong>任何事物，只要有被引用到的必要，它就是一个资源。资源可以是实体(例如手机号码)，也可以只是一个抽象概念(例如价值) </strong>。下面是一些资源的例子:</p>

<ul>
<li>某用户的手机号码</li>
<li>某用户的个人信息</li>
<li>最多用户订购的GPRS套餐</li>
<li>两个产品之间的依赖关系</li>
<li>某用户可以办理的优惠套餐</li>
<li>某手机号码的潜在价值</li>
</ul>


<p>要让一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)。
URI既可以看成是资源的地址，也可以看成是资源的名称。如果某些信息没有使用URI来表示，那它就不能算是一个资源，
只能算是资源的一些信息而已。<strong>URI的设计应该遵循可寻址性原则，具有自描述性，需要在形式上给人以直觉上的关联</strong>。这里以github网站为例，给出一些还算不错的URI：</p>

<ul>
<li>https://github.com/git</li>
<li>https://github.com/git/git</li>
<li>https://github.com/git/git/blob/master/block-sha1/sha1.h</li>
<li>https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08</li>
<li>https://github.com/git/git/pulls</li>
<li>https://github.com/git/git/pulls?state=closed</li>
<li>https://github.com/git/git/compare/master&#8230;next</li>
</ul>


<p>下面让我们来看看URI设计上的一些技巧:</p>

<ul>
<li>使用_或-来让URI可读性更好</li>
</ul>


<p>曾经Web上的URI都是冰冷的数字或者无意义的字符串，但现在越来越多的网站使用_或-来分隔一些单词，让URI看上去更为人性化。
例如国内比较出名的开源中国社区，它上面的新闻地址就采用这种风格，
如http://www.oschina.net/news/38119/oschina-translate-reward-plan。</p>

<ul>
<li>使用/来表示资源的层级关系</li>
</ul>


<p>例如上述/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08就表示了一个多级的资源，
指的是git用户的git项目的某次提交记录,又例如/orders/2012/10可以用来表示2012年10月的订单记录。</p>

<ul>
<li>使用?用来过滤资源</li>
</ul>


<p>很多人只是把?简单的当做是参数的传递，很容易造成URI过于复杂、难以理解。可以把?用于对资源的过滤，
例如/git/git/pulls用来表示git项目的所有推入请求，而/pulls?state=closed用来表示git项目中已经关闭的推入请求，
这种URL通常对应的是一些特定条件的查询结果或算法运算结果。</p>

<ul>
<li>,或;可以用来表示同级资源的关系</li>
</ul>


<p>有时候我们需要表示同级资源的关系时，可以使用,或;来进行分割。例如哪天github可以比较某个文件在随意两次提交记录之间的差异，
或许可以使用/git/git /block-sha1/sha1.h/compare/e3af72cdafab5993d18fae056f87e1d675913d08; bd63e61bdf38e872d5215c07b264dcc16e4febca作为URI。
不过，现在github是使用…来做这个事情的，例如/git/git/compare/master&#8230;next。</p>

<h3>2.2 统一资源接口</h3>

<p><strong>RESTFul架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问</strong>。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p>

<p><strong>如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性</strong>，例如GET和HEAD请求都是安全的，
无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次，
结果总是一样的，后面的请求并不会产生比第一次更多的影响。</p>

<p>下面列出了GET，DELETE，PUT和POST的典型用法:</p>

<h4>GET</h4>

<ul>
<li>安全且幂等</li>
<li>获取表示</li>
<li><p>变更时获取表示（缓存）</p></li>
<li><p>200（OK） - 表示已在响应中发出</p></li>
<li>204（无内容） - 资源有空表示</li>
<li>301（Moved Permanently） - 资源的URI已被更新</li>
<li>303（See Other） - 其他（如，负载均衡）</li>
<li>304（not modified）- 资源未更改（缓存）</li>
<li>400 （bad request）- 指代坏请求（如，参数错误）</li>
<li>404 （not found）- 资源不存在</li>
<li>406 （not acceptable）- 服务端不支持所需表示</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务端当前无法处理请求</li>
</ul>


<h4>POST</h4>

<ul>
<li>不安全且不幂等</li>
<li>使用服务端管理的（自动产生）的实例号创建资源</li>
<li>创建子资源</li>
<li>部分更新资源</li>
<li><p>如果没有被修改，则不过更新资源（乐观锁）</p></li>
<li><p>200（OK）- 如果现有资源已被更改</p></li>
<li>201（created）- 如果新资源被创建</li>
<li>202（accepted）- 已接受处理请求但尚未完成（异步处理）</li>
<li>301（Moved Permanently）- 资源的URI被更新</li>
<li>303（See Other）- 其他（如，负载均衡）</li>
<li>400（bad request）- 指代坏请求</li>
<li>404 （not found）- 资源不存在</li>
<li>406 （not acceptable）- 服务端不支持所需表示</li>
<li>409 （conflict）- 通用冲突</li>
<li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li>
<li>415 （unsupported media type）- 接受到的表示不受支持</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务当前无法处理请求</li>
</ul>


<h4>PUT</h4>

<ul>
<li>不安全但幂等</li>
<li>用客户端管理的实例号创建一个资源</li>
<li>通过替换的方式更新资源</li>
<li><p>如果未被修改，则更新资源（乐观锁）</p></li>
<li><p>200 （OK）- 如果已存在资源被更改</p></li>
<li>201 （created）- 如果新资源被创建</li>
<li>301（Moved Permanently）- 资源的URI已更改</li>
<li>303 （See Other）- 其他（如，负载均衡）</li>
<li>400 （bad request）- 指代坏请求</li>
<li>404 （not found）- 资源不存在</li>
<li>406 （not acceptable）- 服务端不支持所需表示</li>
<li>409 （conflict）- 通用冲突</li>
<li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li>
<li>415 （unsupported media type）- 接受到的表示不受支持</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务当前无法处理请求</li>
</ul>


<h4>DELETE</h4>

<ul>
<li>不安全但幂等</li>
<li><p>删除资源</p></li>
<li><p>200 （OK）- 资源已被删除</p></li>
<li>301 （Moved Permanently）- 资源的URI已更改</li>
<li>303 （See Other）- 其他，如负载均衡</li>
<li>400 （bad request）- 指代坏请求</li>
<li>404 （not found）- 资源不存在</li>
<li>409 （conflict）- 通用冲突</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务端当前无法处理请求</li>
</ul>


<p>下面我们来看一些实践中常见的问题:</p>

<ul>
<li>POST和PUT用于创建资源时有什么区别?</li>
</ul>


<p>POST和PUT在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。
例如为我的博文增加一个java的分类，生成的路径就是分类名/categories/java，那么就可以采用PUT方法。
不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTFul应用中就是这么做的。
我认为，这是因为rails默认使用服务端生成的ID作为URI的缘故，而不少人就是通过rails实践REST的，所以很容易造成这种误解。</p>

<ul>
<li>客户端不一定都支持这些HTTP方法吧?</li>
</ul>


<p>的确有这种情况，特别是一些比较古老的基于浏览器的客户端，只能支持GET和POST两种方法。
在实践上，客户端和服务端都可能需要做一些妥协。例如rails框架就支持通过隐藏参数_method=DELETE来传递真实的请求方法,
而像Backbone这样的客户端MVC框架则允许传递_method传输和设置X-HTTP-Method-Override头来规避这个问题。</p>

<ul>
<li>统一接口是否意味着不能扩展带特殊语义的方法?</li>
</ul>


<p>统一接口并不阻止你扩展方法，只要方法对资源的操作有着具体的、可识别的语义即可，并能够保持整个接口的统一性。
像WebDAV就对HTTP方法进行了扩展，增加了LOCK、UPLOCK等方法。而github的API则支持使用PATCH方法来进行issue的更新，例如:</p>

<p>PATCH /repos/:owner/:repo/issues/:number</p>

<p>不过，需要注意的是，像PATCH这种不是HTTP标准方法的，服务端需要考虑客户端是否能够支持的问题。</p>

<ul>
<li>统一资源接口对URI有什么指导意义?</li>
</ul>


<p>统一资源接口要求使用标准的HTTP方法对资源进行操作，所以URI只应该来表示资源的名称，而不应该包括资源的操作。
通俗来说，URI不应该使用动作来描述。例如，下面是一些不符合统一接口要求的URI:</p>

<ul>
<li>GET /getUser/1</li>
<li>POST /createUser</li>
<li>PUT /updateUser/1</li>
<li><p>DELETE /deleteUser/1</p></li>
<li><p>如果GET请求增加计数器，这是否违反安全性?</p></li>
</ul>


<p>安全性不代表请求不产生副作用，例如像很多API开发平台，都对请求流量做限制。像github，就会限制没有认证的请求每小时只能请求60次。
但客户端不是为了追求副作用而发出这些GET或HEAD请求的,产生副作用是服务端“自作主张”的。
另外，服务端在设计时，也不应该让副作用太大，因为客户端认为这些请求是不会产生副作用的。</p>

<ul>
<li>直接忽视缓存可取吗?</li>
</ul>


<p>即使你按各个动词的原本意图来使用它们，你仍可以轻易禁止缓存机制。
最简单的做法就是在你的HTTP响应里增加这样一个报头： Cache-control: no-cache。
但是，同时你也对失去了高效的缓存与再验证的支持(使用Etag等机制)。
对于客户端来说，在为一个REST式服务实现程序客户端时，也应该充分利用现有的缓存机制，以免每次都重新获取表示。</p>

<ul>
<li>响应代码的处理有必要吗?</li>
</ul>


<p>如上图所示，HTTP的响应代码可用于应付不同场合，正确使用这些状态代码意味着客户端与服务器可以在一个具备较丰富语义的层次上进行沟通。
例如，201（“Created”）响应代码表明已经创建了一个新的资源，其URI在Location响应报头里。
假如你不利用HTTP状态代码丰富的应用语义，那么你将错失提高重用性、增强互操作性和提升松耦合性的机会。
如果这些所谓的RESTFul应用必须通过响应实体才能给出错误信息，那么SOAP就是这样的了，它就能够满足了。</p>

<h3>2.3 资源的表述</h3>

<p>上面提到，客户端通过HTTP方法可以获取资源，是吧? 不，确切的说，客户端获取的只是资源的表述而已。
<strong>资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式,在客户端和服务端之间传送的也是资源的表述，而不是资源本身</strong>。
例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。
<strong>资源的表述包括数据和描述数据的元数据</strong>，例如，HTTP头“Content-Type” 就是这样一个元数据属性。</p>

<p>那么客户端如何知道服务端提供哪种表述形式呢?</p>

<p>答案是可以通过HTTP内容协商，客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。</p>

<p>以github为例，请求某组织资源的json格式的表述形式:</p>

<p><img src="http://mccxj.github.com/assets/images/2013/rest_1.jpg" alt="json格式" /></p>

<p>假如github也能够支持xml格式的表述格式，那么结果就是这样的:</p>

<p><img src="http://mccxj.github.com/assets/images/2013/rest_2.jpg" alt="xml格式" /></p>

<p>下面我们来看一些实践上常见的设计:</p>

<ul>
<li>在URI里边带上版本号</li>
</ul>


<p>有些API在URI里边带上版本号，例如:</p>

<ul>
<li>http://api.example.com/1.0/foo</li>
<li>http://api.example.com/1.2/foo</li>
<li>http://api.example.com/2.0/foo</li>
</ul>


<p>如果我们把版本号理解成资源的不同表述形式的话，就应该只是用一个URL，并通过Accept头部来区分，还是以github为例,它的Accept的完整格式是</p>

<p>application/vnd.github[.version].param[+json]</p>

<p>对于v3版本的话，就是Accept: application/vnd.github.v3。对于上面的例子，同理可以使用使用下面的头部:</p>

<ul>
<li>Accept: vnd.example-com.foo+json; version=1.0</li>
<li>Accept: vnd.example-com.foo+json; version=1.2</li>
<li><p>Accept: vnd.example-com.foo+json; version=2.0</p></li>
<li><p>使用URI后缀来区分表述格式</p></li>
</ul>


<p>像rails框架，就支持使用/users.xml或/users.json来区分不同的格式。
这样的方式对于客户端来说，无疑是更为直观，但混淆了资源的名称和资源的表述形式。
我个人认为，还是应该优先使用内容协商来区分表述格式。</p>

<ul>
<li>如何处理不支持的表述格式</li>
</ul>


<p>当服务器不支持所请求的表述格式，那么应该怎么办？若服务器不支持，它应该返回一个HTTP 406响应，表示拒绝处理该请求。下面以github为例，展示了一个请求XML表述资源的结果：</p>

<p><img src="http://mccxj.github.com/assets/images/2013/rest_3.jpg" alt="不支持的格式" /></p>

<h3>2.4 资源的链接</h3>

<p>我们知道REST是使用标准的HTTP方法来操作资源的，但仅仅因此就理解成带CURD的Web数据库架构就太过于简单了。
这种反模式忽略了一个核心概念: “<strong>超媒体即应用状态引擎（hypermedia as the engine of application state）</strong>”。
超媒体是什么? 当你浏览Web网页时，从一个连接跳到一个页面，再从另一个连接跳到另外一个页面，就是利用了超媒体的概念: 把一个个把资源链接起来.</p>

<p>要达到这个目的，就要求在表述格式里边加入链接来引导客户端。在《RESTFul Web Services》一书中，作者把这种具有链接的特性成为连通性。下面我们具体来看一些例子。</p>

<p>下面展示的是github获取某个组织下的项目列表的请求，可以看到在响应头里边增加Link头告诉客户端怎么访问下一页和最后一页的记录。
而在响应体里边，用url来链接项目所有者和项目地址。</p>

<p><img src="http://mccxj.github.com/assets/images/2013/rest_4.jpg" alt="用url来链接" /></p>

<p>又例如下面这个例子，创建订单后通过链接引导客户端如何去付款。</p>

<p><img src="http://mccxj.github.com/assets/images/2013/rest_5.jpg" alt="引导客户端" /></p>

<p>上面的例子展示了如何使用超媒体来增强资源的连通性。很多人在设计RESTFul架构时，使用很多时间来寻找漂亮的URI,而忽略了超媒体。所以，应该多花一些时间来给资源的表述提供链接，而不是专注于“资源的CRUD”。</p>

<h3>2.5 状态的转移</h3>

<p>有了上面的铺垫，再讨论REST里边的状态转移就会很容易理解了。
不过，我们先来讨论一下REST原则中的无状态通信原则。初看一下，好像自相矛盾了，既然无状态，何来状态转移一说?</p>

<p><strong>其实，这里说的无状态通信原则，并不是说客户端应用不能有状态，而是指服务端不应该保存客户端状态。</strong></p>

<h4>2.5.1 应用状态与资源状态</h4>

<p><strong>实际上，状态应该区分应用状态和资源状态，客户端负责维护应用状态，而服务端维护资源状态</strong>。
客户端与服务端的交互必须是无状态的，并在每一次请求中包含处理该请求所需的一切信息。
服务端不需要在请求间保留应用状态，只有在接受到实际请求的时候，服务端才会关注应用状态。
这种无状态通信原则，使得服务端和中介能够理解独立的请求和响应。
在多次请求中，同一客户端也不再需要依赖于同一服务器，方便实现高可扩展和高可用性的服务端。</p>

<p>但有时候我们会做出违反无状态通信原则的设计，例如利用Cookie跟踪某个服务端会话状态，常见的像J2EE里边的JSESSIONID。
这意味着，浏览器随各次请求发出去的Cookie是被用于构建会话状态的。
当然，如果Cookie保存的是一些服务器不依赖于会话状态即可验证的信息（比如认证令牌），这样的Cookie也是符合REST原则的。</p>

<h4>2.5.2 应用状态的转移</h4>

<p>状态转移到这里已经很好理解了，
<strong>“会话”状态不是作为资源状态保存在服务端的，而是被客户端作为应用状态进行跟踪的。客户端应用状态在服务端提供的超媒体的指引下发生变迁</strong>。服务端通过超媒体告诉客户端当前状态有哪些后续状态可以进入。
这些类似“下一页”之类的链接起的就是这种推进状态的作用&#8211;指引你如何从当前状态进入下一个可能的状态。</p>

<h2>3 总结</h2>

<p>现在广东XXX版本、XXX等项目中均使用传统的RPC、SOAP方式的Web服务，而移动南方基地XXXX项目的后台,
虽然采用了JSON格式进行交互，但还是属于RPC风格的。本文从资源的定义、获取、表述、关联、状态变迁等角度，
试图快速理解RESTFul架构背后的概念。RESTFul架构与传统的RPC、SOAP等方式在理念上有很大的不同，希望本文能对各位理解REST有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye,Google Reader]]></title>
    <link href="http://mccxj.github.com/blog/20130519_rss-reading.html"/>
    <updated>2013-05-19T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/rss-reading</id>
    <content type="html"><![CDATA[<p>今天早上,把Google Reader的订阅迁移到鲜果,顺便整理了Reader里边的RSS订阅,略为增长了一点,到153个，主要增加了许多国内著名互联网公司的团队博客。
鲜果是把订阅和RSS订阅分开的，对于我来说，这显得很不习惯。对于鲜果来说，想打造社交阅读平台，又不得不保留RSS订阅这种传统模式，也是挺无奈的。</p>

<p>另外，看过Feng写的<a href="http://dbanotes.net/mylife/the_bloggers.html">那些写过博客的人们</a>,我也发现了有不少人的博客很久之前就停止更新了。
博客这东西，在微博，微信等新媒体的冲击下，更显得步伐缓慢，似乎不适应新时代的要求。但只有这些写下的文字，才显得有点沉淀，
也只有部分通过写博客获得了某些真实东西的人才坚持下来。</p>

<p>分享一下我的<a href="https://www.dropbox.com/s/ypo8lnsjogbtklm/export-2013-05-19.opml?v=0rc-">RSS订阅</a>.</p>

<p>Google Reader即将关闭，阅读还将继续~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书会,爱读书]]></title>
    <link href="http://mccxj.github.com/blog/20130517_reading-share-java-puzzle.html"/>
    <updated>2013-05-17T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/reading-share-java-puzzle</id>
    <content type="html"><![CDATA[<p>话说，很久没有更新博客了，真是惭愧呀。</p>

<p>今天下午，在部门里边小范围举行了一场读书分享会。我把最近读的一本书,java解惑跟大家分享一下。
主要使用了书中的一些范例，跟大家一起学习探讨，分享会下来，大家都觉得挺高兴的。</p>

<p>我的主要目的也达到了，活跃一下大家的气氛，接下来计划每周简单搞一次，或许再弄点吃的，好好享受这个过程。
当然，这个需要持续进行，还少不了更多人的支持，慢慢把范围和影响扩大，逐渐成为一个招牌节目:)</p>

<p>java解惑也是好几年前的书了，很早之前就听过，这次是在地铁上拿电子版在看，基本上我只能答对里边一半左右的谜题，
感觉对于java这么古板的语言，坑都不少，跟何况c++这样的庞然大物? 总体来说，我给这本书评4颗星，推荐级别。</p>

<p>下周的读书会，讲一本java网络编程的入门书籍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断循环菜单的思考]]></title>
    <link href="http://mccxj.github.com/blog/20130328_cycle-menu.html"/>
    <updated>2013-03-28T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/cycle-menu</id>
    <content type="html"><![CDATA[<p>今天下午的时候，在执行gem clean命令看到包依赖的时候，突然想起关于循环菜单的老问题。</p>

<h3>无限级菜单的问题</h3>

<p>很多系统的菜单都要求是无限级的，也就是可以很多层的父子菜单关系。
在进行数据存储的设计的时候，以数据库为例，通常都会给菜单表增加一个父菜单的字段，用来标识从属于哪个菜单。</p>

<p>这里就要求菜单的配置不能出现循环，例如某个菜单的父父菜单是它的子菜单，这是不允许的。
但有时候难免出现一些错误，特别不是通过可视化界面增加菜单的时候。我们的系统也曾经出现过，例如见<a href="http://mccxj.github.com/blog/20120804_improve-bitter-code-7.html">定位数据问题</a>。</p>

<h3>如何判断循环</h3>

<p>就拿<a href="http://mccxj.github.com/blog/20120804_improve-bitter-code-7.html">定位数据问题</a>来说，当时时间比较急就没多想，直接参考了项目中已有的逻辑。</p>

<p>考虑整个菜单结构是一棵树的话，它的判断逻辑的思路是，第一次把根结点去掉(最顶层的菜单)，
第二次把剩余的树的根结点去掉，以此类推，直到最后没有结点(没有循环)，或没有结点可以删除(出现循环)。
写成伪代码的话，大约是这样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">hasDel</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="n">hasDel</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="k">for</span> <span class="err">结点</span> <span class="n">in</span> <span class="err">树</span>
</span><span class='line'>    <span class="k">if</span> <span class="err">结点</span> <span class="n">has</span> <span class="n">not</span> <span class="err">父节点</span>
</span><span class='line'>      <span class="err">删除结点</span> <span class="n">and</span> <span class="n">hasDel</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="k">while</span> <span class="n">hasDel</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="err">还剩下结点</span>
</span><span class='line'>  <span class="err">出现循环</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="err">没有循环</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为每次操作都要循环剩下的整个树，循环的次数很关键，如果树有3层，扫描3次即可，如果层次很深，扫描的次数就比较可观了。</p>

<h3>另一个思路</h3>

<p>以其中某个结点为例，它有父节点..一直到根节点，或者出现循环。
如果不是循环，则整结点都可以去掉。这样的话，只需要遍历整棵树，对未处理的结点，进行循环判断即可，而处理过的(去掉的)可以忽略。</p>

<p>伪代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="err">结点</span> <span class="n">in</span> <span class="err">树</span>
</span><span class='line'>  <span class="k">if</span> <span class="err">结点已经被标识为已处理</span>
</span><span class='line'>    <span class="k">continue</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="err">判断结点到根结点是否存在循环</span><span class="o">(</span><span class="err">如在路径上遇到已处理的直接返回</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="err">存在循环</span>
</span><span class='line'>       <span class="err">出现循环</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>       <span class="err">标记结点到根结点为已处理</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>问题现在就回到如何判断循环链表</strong>，这其实是个经典的面试笔试题了，我在网上挑了其中一个解答:<a href="http://blog.csdn.net/splendour/article/details/7701449">判断循环链表</a>
对于我们的情况，在遇到已处理结点的时候，直接就可以说明没有循环了，这里可以小优化一下。</p>

<h3>效率分析</h3>

<p>我们粗略的分析一下，外层循环的数量级是整个树的结点数，判断循环的逻辑是和结点的深度有关系的，
以极端的情况为例，只有1层的话，很明显，相当于扫描一次结点。如果是个非常深的结点(都是单子结点)，就最后一个的结点的话，循环判断的次数也是和结点数成线性的。</p>

<p><strong>结点越深，循环判断的次数就越多，跟结点到根节点的长度成正比，但一次排除的结点也越多。总体还是跟总的结点数成线性正比的。</strong>
相对于原来的处理方式，平均效率就是它的最好效率。</p>

<h3>小结</h3>

<p>判断链表是否存在循环这种面试题，还是有点实际用处的，以前真的没特别留意。
算法这东西，真的是无处不在的呀。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这些天,我们用到的算法]]></title>
    <link href="http://mccxj.github.com/blog/20130327_these-days-algorithms.html"/>
    <updated>2013-03-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/these-days-algorithms</id>
    <content type="html"><![CDATA[<p>平时做的应用，的确很少涉及非常具体的局部算法。不过最近一段时间还是遇到了一些，稍微整理一下，留个纪念。</p>

<h3>产品的组合生成</h3>

<p>举个例子，手机的颜色有黑白的，内存有16G,32G的，那么就有黑色16G,黑色32G，白色16G，黑色32G等组合项，
当然属性可能不止两项，想列出所有的组合项。</p>

<p>如果只有两种属性，很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="err">属性</span> <span class="n">in</span> <span class="err">属性</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="err">属性</span> <span class="n">in</span> <span class="err">属性</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>       <span class="c1">// TODO 得到组合项</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，如果有不定项的话，就不能这么写了。</p>

<p><strong>这需要知道点回溯法的技巧，我是用了非递归的方式编写的</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="nf">merge</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;...</span> <span class="n">ls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">pos</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span><span class="c1">//对i而言，表示第i种属性当前选择是哪个值</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">len</span><span class="o">];</span><span class="c1">//存放待生成的组合项</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//当前正在遍历第几种属性</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">ls</span><span class="o">[</span><span class="n">k</span><span class="o">].</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">r</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">ls</span><span class="o">[</span><span class="n">k</span><span class="o">].</span><span class="na">get</span><span class="o">(</span><span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span><span class="c1">//是否已经是最后一个属性</span>
</span><span class='line'>                <span class="c1">// 找到一个组合项，复制到res里边去</span>
</span><span class='line'>                <span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">k</span><span class="o">++;</span><span class="c1">//当前位置的属性已经选择，处理下一种属性</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">k</span><span class="o">--;</span><span class="c1">//当前位置的属性已经遍历完，需要回溯到上一种属性去</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">pos</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>说真的，即使加了注释，没有相关的算法基础，也是不容易看清楚的，所以有同事看到这个写法，在大呼救命。</p>

<h3>请求URL参数匹配</h3>

<p>最近有需求，要对请求里边的参数做匹配，规则是这样的：</p>

<p>例如有下面三条规则(其中问号表示变量，参数的顺序没关系):
* User=?&amp;Password=BB&amp;CurrentTab=LOG&amp;CurrentTab2=LOG
* User=?&amp;Password=?&amp;CurrentTab=LOG1
* User=?&amp;Password=?&amp;CurrentTab=LOG</p>

<p>如果请求参数是XX=222&amp;User=Q&amp;Password=BB&amp;CurrentTab=LOG，则只能匹配第三条，因为第一条多一个参数，第二条的值是LOG1，对应不上。<br/>
如果请求参数是User=QQ&amp;CurrentTab=LOG1&amp;Password=AA,同样只能匹配到第三条。</p>

<p>有个非常简单的思路，就是把参数拆开，然后一个个匹配。但是由于业务的请求数非常大，担心对系统是否有影响。</p>

<p>于是，弄了个测试原型，开50个线程的线程池，跑500个任务，每个任务跑1w次，匹配3个配置项。整个框架代码是这样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">match1</span> <span class="o">=</span> <span class="s">&quot;User=?&amp;Password=BB&amp;CurrentTab=LOG&amp;CurrentTab2=LOG&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">match2</span> <span class="o">=</span> <span class="s">&quot;User=?&amp;Password=?&amp;CurrentTab=LOG1&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">match3</span> <span class="o">=</span> <span class="s">&quot;User=?&amp;Password=?&amp;CurrentTab=LOG&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ExecutorService</span> <span class="n">pool</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tasksize</span> <span class="o">=</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">latch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="n">tasksize</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">long</span> <span class="n">s</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">tasksize</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">pool</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">(</span><span class="mi">100000000</span><span class="o">);</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">String</span> <span class="n">toMatch</span> <span class="o">=</span> <span class="s">&quot;XX=&quot;</span>
</span><span class='line'>                                     <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()</span>
</span><span class='line'>                                     <span class="o">+</span> <span class="s">&quot;&amp;User=AA&amp;Password=BB&amp;CurrentTab=LOG&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="c1">// TODO 测试toMatch</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先用最简单的方法来做基准测试，有时候最简单的方法就可以满足要求了，粗略的代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>                    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">matchs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>                    <span class="n">String</span><span class="o">[]</span> <span class="n">split</span> <span class="o">=</span> <span class="n">toMatch</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;&amp;&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">mss</span> <span class="o">:</span> <span class="n">split</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">String</span><span class="o">[]</span> <span class="n">split2</span> <span class="o">=</span> <span class="n">mss</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">matchs</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">split2</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">split2</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">similar</span><span class="o">(</span><span class="n">match1</span><span class="o">,</span> <span class="n">matchs</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">similar</span><span class="o">(</span><span class="n">match2</span><span class="o">,</span> <span class="n">matchs</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">similar</span><span class="o">(</span><span class="n">match3</span><span class="o">,</span> <span class="n">matchs</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">similar</span><span class="o">(</span><span class="n">String</span> <span class="n">match</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">matchs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;&amp;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">m</span> <span class="o">:</span> <span class="n">ms</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">split2</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">matchs</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">split2</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="s">&quot;?&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">split2</span><span class="o">[</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">split2</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">matchs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">split2</span><span class="o">[</span><span class="mi">0</span><span class="o">])))</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在我的机器上简单跑一下，大约要28s。这个算法非常暴力，用split和map结构搞定了。
如果用StringTokenizer的话，还能快些，我试了一下，把第一步split换了的话，大约需要25s.
<strong>我觉得这个效果也还是可以接受的。</strong></p>

<p>下面再用纯手工操作字符串的方式，代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>                    <span class="n">UrlMatcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UrlMatcher</span><span class="o">(</span><span class="n">toMatch</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">matcher</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">match1</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">matcher</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">match2</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">matcher</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">match3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">UrlMatcher</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">toMatch</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">pos</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">20</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ps</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">UrlMatcher</span><span class="o">(</span><span class="n">String</span> <span class="n">toMatch</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ss</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">toMatch</span> <span class="o">=</span> <span class="n">toMatch</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">toMatch</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">st</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ed</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">toMatch</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;=&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ed</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">pos</span><span class="o">[</span><span class="n">ss</span><span class="o">++]</span> <span class="o">=</span> <span class="n">st</span><span class="o">;</span>
</span><span class='line'>                <span class="n">pos</span><span class="o">[</span><span class="n">ss</span><span class="o">++]</span> <span class="o">=</span> <span class="n">ed</span><span class="o">;</span>
</span><span class='line'>                <span class="n">st</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">pos</span><span class="o">[</span><span class="n">ss</span><span class="o">++]</span> <span class="o">=</span> <span class="n">st</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&amp;&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">pos</span><span class="o">[</span><span class="n">ss</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">st</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">pos</span><span class="o">[</span><span class="n">ss</span><span class="o">]</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ps</span> <span class="o">=</span> <span class="o">(</span><span class="n">ss</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">match</span><span class="o">(</span><span class="n">String</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">st</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ed</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">vs</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ve</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;=&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ed</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">vs</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&amp;&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ve</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">match2</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">st</span><span class="o">,</span> <span class="n">ed</span><span class="o">,</span> <span class="n">vs</span><span class="o">,</span> <span class="n">ve</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">st</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">match2</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">st</span><span class="o">,</span> <span class="n">ed</span><span class="o">,</span> <span class="n">vs</span><span class="o">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">match2</span><span class="o">(</span><span class="n">String</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">st</span><span class="o">,</span> <span class="kt">int</span> <span class="n">ed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">vs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">ve</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">ma</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ps</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">sst</span> <span class="o">=</span> <span class="n">st</span> <span class="o">-</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">toMatch</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="n">m</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">sst</span> <span class="o">+</span> <span class="n">j</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">ma</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">ma</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">ve</span> <span class="o">==</span> <span class="n">vs</span> <span class="o">&amp;&amp;</span> <span class="sc">&#39;?&#39;</span> <span class="o">==</span> <span class="n">m</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">vs</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="o">]</span> <span class="o">-</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="n">ve</span> <span class="o">-</span> <span class="n">vs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="kt">int</span> <span class="n">vst</span> <span class="o">=</span> <span class="n">vs</span> <span class="o">-</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">];</span>
</span><span class='line'>                            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">];</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">pos</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="o">];</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                                <span class="k">if</span> <span class="o">(</span><span class="n">toMatch</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="n">m</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">vst</span> <span class="o">+</span> <span class="n">j</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                                <span class="o">}</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>代码比较粗糙，对某些情况不是很严格，但不影响总体的性能评测，<strong>这个逻辑不到2s，要快15倍以上</strong>。
这个写法的特点是:<strong>使用数组而不是Map，使用标记位置而不是截取字符串，一次扫描。</strong></p>

<p><strong>不过，这个代码很粗糙，不要太当真。</strong></p>

<p>看看我机器上显示的虚拟机负载情况。</p>

<p>图1:最简单的做法
<img src="http://mccxj.github.com/assets/images/2013/match1.jpg" alt="简单方法+多线程" /></p>

<p>图2:手工打造，相对的内存消耗小些
<img src="http://mccxj.github.com/assets/images/2013/match2.jpg" alt="手工打造+多线程" /></p>

<p>图3:还是手工打造，不过单线程，相对来说CPU使用率就小很多了
<img src="http://mccxj.github.com/assets/images/2013/match3.jpg" alt="手工打造+单线程" /></p>

<h3>小结</h3>

<p>经常听到算法没什么用，算法没地方使用的论调，我也都一笑置之。
不过，<strong>我也承认，在现在的工作中，的确很少会直接面对非常具体的局部算法</strong>。
但我还是不能赞同上面的观点，<strong>毕竟有些场景还是不得不考虑的</strong>:</p>

<ol>
<li>做不到，没有算法的支持，根本不知怎么写好</li>
<li>做不好，简单的实现没法满足，需要高效的算法</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手绘的思维导图:程序员的思维修炼]]></title>
    <link href="http://mccxj.github.com/blog/20130324_mind-map-with-hand.html"/>
    <updated>2013-03-24T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/mind-map-with-hand</id>
    <content type="html"><![CDATA[<h3>手绘的思维导图</h3>

<p>先看看今天早上手绘的作品，没有工具绘制的工整，但感觉效果更棒!</p>

<p><img src="http://mccxj.github.com/assets/images/2013/mind-map-with-hand.jpg" alt="程序员的思维修炼" /></p>

<h3>再谈谈这本书</h3>

<p>这本书感觉就是从小工到专家的续作，但不是只有程序员才能阅读并受益的书籍，推荐指数:5个星星。</p>

<p>书的主题是围绕德雷福斯技能模型，区分L型和R型思维方式，<strong>讲述如何学习的技能</strong>。在实践方式上，我重点谈谈我印象比较深的几个方法。
这些方法的操作性也比较强:</p>

<ol>
<li>晨写，早上第一件事，只写不审查</li>
<li>自由写，就是写博客的习惯</li>
<li>SMART任务</li>
<li>SQ3R主动阅读</li>
<li>手绘思维导图</li>
<li>以教代学，说出来</li>
<li>冥想，关注呼吸，类似自我催眠的技巧</li>
<li>GTD，不要在头脑保存列表</li>
</ol>


<p><strong>1和2是记录和积累，3是目标管理，4和5,6是增强学习效果,7和8是注意力管理。</strong>
现在来说，关于晨写和SMART，我没什么使用经验，正在学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java性能--降低时间与空间消耗]]></title>
    <link href="http://mccxj.github.com/blog/20130315_java-performance.html"/>
    <updated>2013-03-15T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/java-performance</id>
    <content type="html"><![CDATA[<h3>译者的话</h3>

<p>断断续续的翻译完了，有些地方翻译得比较纠结，很难选择一个合适的表达。
中文和英文在表达上还是有很多习惯上的不同，我又不想掺杂太多自己的意译上去，搞得有点进退两难。
有能力的同学还是尽量阅读英文的吧，毕竟这篇文章的英文并不深。</p>

<p><strong>作者: Reter Sestoft(sestoft@dina.kvl.dk)</strong> <br/>
<strong>对应版本:2005-04-13 Version2</strong><br/>
<a href="http://www.itu.dk/people/sestoft/papers/performance.pdf">原文链接</a></p>

<h3>前言</h3>

<p>我们提出一些通过降低时间与间消耗来改进java程序运行时间的建议。
这里没有什么魔术的技巧，仅仅在避免常见问题上提出建议。</p>

<h3>1 降低时间消耗</h3>

<h4>1.1 基本代码优化</h4>

<p>不要期望java编译器(例如javac或jikes)去做许多聪明的优化。
因为java有比较严格的语句次序和线程语义，所以相对于C或者Fortran等比较少严格定义的语言，
要安全的提高java程序的性能，编译器能做的事情很有限。但是你可以改进你自己的java源代码，来做到这点。</p>

<p><strong>注: 理解为语句上的次序</strong> <br/>
<strong>注: 严格定义指语法上限制</strong></p>

<ul>
<li>把循环不变量的计算移到循环之外。例如，避免重复计算一个for循环里的边界，像这样:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">()*</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该仅计算一次循环边界，然后把结果赋值给一个本地变量，像这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">stop</span><span class="o">=</span><span class="n">size</span><span class="o">()*</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">stop</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不要重复计算同样的子表达式:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">birds</span><span class="o">.</span><span class="na">elementAt</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">isGrower</span><span class="o">())</span> <span class="o">...</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">birds</span><span class="o">.</span><span class="na">elementAt</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">isPullet</span><span class="o">())</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该计算子表达式一次，然后把结果赋值给一个变量，并且重用这个变量:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Bird</span> <span class="n">bird</span> <span class="o">=</span> <span class="n">birds</span><span class="o">.</span><span class="na">elementAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">bird</span><span class="o">.</span><span class="na">isGrower</span><span class="o">())</span> <span class="o">...</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">bird</span><span class="o">.</span><span class="na">isPullet</span><span class="o">())</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>每一次数组访问需要一个索引检查，所以降低数据访问次数是值得的。另外，通常java编译器不能
自动优化多维数组的索引。例如，内循环(j)的每次迭代，重新计算索引rowsum[i]和arr的第一维索引arr[i]:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">double</span><span class="o">[]</span> <span class="n">rowsum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span><span class='line'>    <span class="n">rowsum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>相反，在外循环的每次迭代中只计算一次这些索引值:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">double</span><span class="o">[]</span> <span class="n">rowsum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">double</span><span class="o">[]</span> <span class="n">arri</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">arri</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>  <span class="n">rowsum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意的是，初始化中arri = arr[i]并没有拷贝数组的第i行;它仅仅把数组引用(4个字节)赋给arri.</p>

<ul>
<li>把不变属性声明为final static，让编译器可以inline它们和预计算不变表达式。</li>
<li>把不变的变量声明为final，让编译器可以inline它们和不变表达式。</li>
<li>如果可以的话，把一个长的if-else-if链替换为switch；它要快很多.</li>
<li>加入一个长的if-else-if链不能替换为switch(例如因为它检测一个String)，
假如它执行很多次的话，通常值得替换为一个final static的HashMap，或类似的结构。</li>
<li>使用&#8217;聪明的&#8217;C惯用法没有什么用(除了让代码更隐晦)，例如一个while循环的循环条件中进行所有的计算工作:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">year</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">200.0</span><span class="o">;</span>
</span><span class='line'><span class="kt">double</span><span class="o">[]</span> <span class="n">balance</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
</span><span class='line'><span class="k">while</span> <span class="o">((</span><span class="n">balance</span><span class="o">[</span><span class="n">year</span><span class="o">++]</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">*=</span> <span class="mf">1.05</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mf">1000.0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.2 属性和变量</h4>

<ul>
<li>访问本地变量和方法中参数，要比访问静态属性或实例属性要快得多。
对于一个循环中的属性访问，在循环之前可能值得拷贝属性的值到本地变量，
然后在循环中只是引用本地变量。</li>
<li>在方法里边的嵌套代码块或循环中，定义变量是没有运行时开销的。
尽可能的声明为本地变量(尽可能使用小的作用域)通常有助于代码清晰，
甚至可以帮助编译器改进你的程序。</li>
</ul>


<h4>1.3 字符串操作</h4>

<ul>
<li>不用通过重复的字符串连接来构建字符串。下面的循环在每次迭代会多花一倍的时间(较上次).
并且也很可能造成堆碎片化(见第二节):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">+=</span> <span class="s">&quot;#&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该使用StringBuilder对象和它的append方法。这样在每次迭代中的实现消耗都是线性的(较上次)，
可能有几个数量级速度提升。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sbuf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">sbuf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;#&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sbuf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>另一方面，一个包含一序列字符串连接的表达式会被自动编译成使用StringBuilder.append(&#8230;)的形式，所以也是可行的:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不要通过重复查询或修改一个String或StringBuilder来处理字符串。
而重复使用String的substring和index方法，可能是合理的，但是应该用怀疑的眼光来看待。</li>
</ul>


<p><strong>注: 这一段的翻译很纠结</strong></p>

<h4>1.4 数组中常量表的排序</h4>

<ul>
<li>在方法中声明一个初始化数组变量，在方法的每次执行中都会导致一个新数组被分配：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">monthdays</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">monthlengths</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span> <span class="o">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">leapyear</span><span class="o">(</span><span class="n">y</span><span class="o">)</span> <span class="o">?</span> <span class="mi">29</span> <span class="o">:</span> <span class="n">monthlengths</span><span class="o">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个初始化数组变量或者类似的表格应该仅仅声明和分配一次，并且在一个封闭的类中作为一个final static的属性存在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">monthlengths</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span> <span class="o">};</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">monthdays</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">leapyear</span><span class="o">(</span><span class="n">y</span><span class="o">)</span> <span class="o">?</span> <span class="mi">29</span> <span class="o">:</span> <span class="n">monthlengths</span><span class="o">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>更复杂的初始化可以使用一个静态代码块static { &#8230; }，例如来预计算一个数组的内容:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">double</span><span class="o">[]</span> <span class="n">logFac</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">logRes</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">stop</span><span class="o">=</span><span class="n">logFac</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">stop</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>    <span class="n">logFac</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">logRes</span> <span class="o">+=</span> <span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">logBinom</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">logFac</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">-</span> <span class="n">logFac</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="o">]</span> <span class="o">-</span> <span class="n">logFac</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>静态初始化块在这个封闭的类被加载的时候执行。
在这个例子中，它预先计算一个存放阶乘函数(n! = 1.2&#8230;(n-1)*n)的对数的表logFac。
所以方法logBinomial(n,k)可以有效的计算二项式系数的对数。作为实例，
从52张卡中选择7张卡，是Math.exp(logBinom(52, 7))，得到133784560。</p>

<h4>1.5 方法</h4>

<ul>
<li>声明方法为private,final或者static可以让调用更快。当然，只有应用需要时你才应该这么做。</li>
<li>作为例子，通常一个访问器方法如getSize，当子类无需覆盖它的时候，在类里边有理由作为final存在:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样可以让o.getSize()和直接访问公有属性o.size一样快。
做些适当的封装(让属性变成private)不会造成额外的性能影响。</p>

<ul>
<li>虚方法调用(Virtual method calls) (调用实例方法)是很快的，应该用来替换instanceof测试和强制转换。</li>
<li>在现代java虚拟机实现中，像Sun的HotSpot JVM和IBM的JVM，接口方法调用和抽象方法调用实例方法是一样快的。
因此使用接口，而不是他们的实现类作为方法参数，这样的友好编程方式是没有额外的性能影响的。</li>
</ul>


<h4>1.6 排序和搜索</h4>

<ul>
<li>永远不要使用选择排序、冒泡排序或插入排序，除非是一个非常小的数组或列表。
使用堆排序(对于数组)或合并排序(对于双向链表)或快速排序(对于数组，但是你需要找个好的参考值)</li>
<li>更好的选择是，使用能够保证很快的内置的排序例程:对于n个元素是O(nlog(n))，
当数据接近排序好的时候，有时候乐意更快:</li>
</ul>


<p>对于数组，使用java.util.Arrays.sort，是一个改进过的快速排序；
它不需要额外的内存，但是它不是稳定的(不能保证相等对象的顺序)。
现在有所有原生类型和对象的重载版本。</p>

<p>对于ArrayList<T>和LinkedList<T>,他们都实现了接口java.util.List<T>,可以使用
java.util.Collections.sort来排序，它是稳定的(保证相等对象的顺序)和平滑的(对于接近排好序的列表接近线性时间)，
但是它使用了额外的内存。</p>

<ul>
<li>避免在数组和列表里边做线性查询，除非你知道他们非常短。假如你的程序需要频繁的查找某些内容，
可以从下面的方法中选择:</li>
</ul>


<p>-在排好序的数据上做两分搜索</p>

<p>对于数组，使用java.util.Arrays.binarySearch。数组必须是排好序的，例如经过了java.util.Arrays.sort.
已经有了所有原生类型和对象的重载版本。</p>

<p>对于ArrayList<T>,使用java.util.Collections.binarySearch.数组列表必须是有序的，
例如经过了java.util.Collections.sort.</p>

<p>假如你还需要从一个set或者map中插入或删除元素，可以使用下面的方法:</p>

<p>-哈希化(Hashing): 假如你的key对象有很好的hashCode方法，可以使用java.uitl包里边的HashSet<T>或HashMap&lt;K, V>。
这适用于String和原生类型的包准类Interger,Double等等。</p>

<p>-两分搜索树(Binary search trees)：假如你的key对象有一个很好的比较方法compareTo的话，可以使用
java.util包里边的TreeSet<T>或TreeMap&lt;K, V>.这同样适用于String和原生类型的包装类Integer,Double等等。</p>

<h4>1.7 异常</h4>

<ul>
<li>异常对象的构建new Exception(&#8230;)会构造一个调用栈轨迹(stack trace),需要消耗时间和空间，特别
是在递归方法调用的时候。Exception类或子类的对象的创建要比普通对象慢30~100倍。另外一方面，使用
try-catch快活着抛出一个异常是很快的。</li>
<li>像下面演示的，你可以通过在Exception子类中覆盖方法fillInStackTrace，来阻止一个栈轨迹的生成。
这可以让异常实例的创建要快上大约10倍。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">MyException</span> <span class="kd">extends</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Throwable</span> <span class="nf">fillInStackTrace</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>因此，你应该在真的打算抛出异常的时候才创建一个异常对象。另外，不要使用异常来实现流程控制
(结束数据处理，跳出循环)；异常应该只是用来通知错误和异常情况(文件没有找到，非法的输入格式等等)。
假如你的程序真的需要非常频发的抛出异常，可以重用一个预先构造的异常对象。</li>
</ul>


<h4>1.8 集合类</h4>

<p>在包java.util.*的java集合类是设计良好并实现的。使用这些类可以很好的改进你的程序的速度，但是你需要一些陷阱.</p>

<ul>
<li>如果你使用HashSet<T>或HashMap&lt;K,V>，确保你的key对象有一个好而快的hashCode方法，并且它和equals方法保持一致。</li>
<li>如果你使用TreeSet<T>或TreeMap&lt;K,V>, 确保你的key对象有一个好而快的compareTo方法，
或者提供一个Comparator<T>.但创建TreeSet<T>或TreeMap&lt;K,V>的时候需要一个明确的Comparator<K>对象。</li>
<li>注意通过索引定位ListedList<T>不是一个常量时间操作。因此在下面的循环中，假如lst是一个LinkedList<T>的话，
在列表1st里边需要花费两倍的时间。(<strong>注:翻译很纠结，不准</strong>)，所以不应该使用:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">lst</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lst</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该使用增强型for语句来迭代元素，它其实是使用集合的迭代器，所以遍历花费线性的时间:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="n">x</span> <span class="o">:</span> <span class="n">lst</span><span class="o">)</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>应该避免重复调用LinkedList<T>或ArrayList<T>的remove(Object o)方法，因为它使用顺序查找。</li>
<li>应该避免重复调用LinkedList<T>的add(int i, T x)或者remove(int i)方法，除非i是链表的最后或第一个。
这些方法都是使用顺序来查找第i个元素的。</li>
<li>应该避免重复调用ArrayList<T>的add(int i, T x)或remove(int i)方法，除非i是ArrayList<T>的最后一个。
它需要移动i后面的所有元素。</li>
<li>尽量避免使用传统的集合类，如Vector,HashTable和Stack，因为它们的方法都是synchronized的，
每一个集合方法的调用都有获取锁的运行时消耗。假如你真的需要一个同步的集合，请使用synchronizedCollection
和java.util.Collection类的类似方法来创建。</li>
<li>集合只能存放引用类型的数据，所以原生类型的值，例如int,double等等在集合中存储或作为key使用的时候，
必须包准为Integer,Double等。这需要花费时间和空间，在内存受限的嵌入式应用中可能是不可接受的。需要注意的是，
字符串和数组是引用类型数据，在使用时不需要被包装。</li>
</ul>


<p>假如你需要有原生类型元素或key的集合，考虑使用Trove library,它提供了特殊处理的集合，像用int的哈希Set等等。
因此，他相对于通用的java集合类，它更快并且使用更少的内存。Trove可以在<a href="http://trove4j.sourceforge.net">http://trove4j.sourceforge.net</a>中找到。</p>

<h4>1.9 输入和输出</h4>

<ul>
<li>使用带缓冲的输入和输出(包java.io里边的BufferedReader, BufferedWriter, BufferedInputStream,
BufferedOutputStream)可以让输入/输出提速20倍。</li>
<li>使用包java.util.zip里边的压缩流ZipInputStream和ZipOutputStream或者
GZIPInputStream和GZIPOutputStream，可以加速冗长的数据格式如XML的输入输出。压缩和解压缩
需要CPU时间，但是压缩的数据可以比没压缩的数据小很多，从硬盘或网络中读取的数据更少，
因此无论如何还是节约了时间。同时它还节约了硬盘上的存储空间。</li>
</ul>


<h4>1.10 空间和对象创建</h4>

<ul>
<li>假如你的程序使用过多的空间(内存),那么它也会使用过多的时间。对象分配和垃圾回收需要时间，
并且使用过多的内存导致糟糕的缓存利用率，甚至可能需要使用到虚拟内存(使用硬盘空间而不是RAM)。
而且，依赖于JVM的垃圾回收器，使用太多内存可能导致长时间的回收停顿。这会让交互系统变得恼人，
在实时系统更是难以接受(catastrophic).</li>
<li>对象创建需要时间(分配，初始化，垃圾回收)，所以不要在没必要的时候创建对象。
然而不要考虑对象池(在工厂方法里边)，除非真的有需要。
最有可能的是,你只会添加代码和维护问题，你的对象池在回收一个池中对象的时候，可能引发微妙的错误，
虽然它仍然被引用着并且被在程序的其他部分中被修改。</li>
<li>小心不要创建从来没有被使用的对象。例如，创建一个错误消息字符串，当从来没有被真正使用过，这就是一个典型的错误。
因为嵌入这个消息的异常被一个try-catch捕获之后，但它忽略了这个消息。</li>
<li>GUI组件(通过AWT或Swing创建)可能要求更多的空间，并且可能没有被充分的回收。
不要创建你不一定需要的GUI组件。</li>
</ul>


<h4>1.11 大数组操作</h4>

<p>对于在数组上进行大量操作，有一些特别的方法。它们通常要比等同的for循环快很多，
在某种程度上是因为它们只需要一次边界检查。</p>

<ul>
<li>static void java.lang.System.arrayCopy(src, si, dst, di, n)会把数组片段src[si..si+n-1]
的元素拷贝到数组片段dst[di..di+n-1].</li>
<li>static bool java.util.Arrays.equals(arr1, arr2)会返回true，当数组arr1和arr2有同样的长度
并且它们的元素成对相等(pairwise equal)。还有参数类型为boolean[], byte[], char[],
double[], float[],int[], long[], Object[]和short[]的重载方法。</li>
<li>static void java.util.Arrays.fill(arr, x)会把数组arr的所有元素设置为x.这个方法拥有和
Arrays.equals一样的重载方法。</li>
<li>static void java.util.Arrays.fill(arr, i, j, x)会把元素arr[i..j-1]设置为x.这个方法拥有和
Arrays.equals一样的重载方法。</li>
<li>static int java.util.Arrays.hashcode(arr)会返回一个由数组元素的hashcode计算出来
的数组的hashcode。这个方法拥有和Arrays.equals一样的重载方法。</li>
</ul>


<h4>1.12 科学计算</h4>

<p>假如你需要在java中使用科学计算，Colt开源库提供了许多高性能和高质量的例程(routine)，用来处理
线性代数、稀疏/稠密矩阵、数据分析统计工具、随机数生成器、数组算法、数学函数和复数。
如果你需要的已经在这里存在了，就不要在写一个新的低效的、不精确的数值例程了。Colt在
<a href="http://hoschek.home.cern.ch/hoschek/colt/">http://hoschek.home.cern.ch/hoschek/colt/</a>可以找到。</p>

<h4>1.13 反射</h4>

<ul>
<li>反射方法调用，反射属性访问和反射对象创建(使用包java.lang.reflect)要比普通方法调用、属性访问、对象创建慢非常多。</li>
<li>访问检查会拖慢一些反射调用；部分消耗或许可以通过把调用方法声明为public进行避免。这可以将反射调用加速8倍。</li>
</ul>


<h4>1.14 编译器和运行平台</h4>

<ul>
<li>正如上面提到的，许多C或者Fortran编译器可以做到的优化，java编译器做不到。另外一方面，在执行字节码的时候，
Java虚拟机(JVM)里边的即时编译器(JIT)可以做到传统编译器不能做到的许多优化。</li>
<li>例如，在cast(C)后面的一个测试条件(x instanceof C)可以被JVM优化，以致于最多只有一个测试会被执行。
所以重写你的程序来避免instanceof测试或者cast的麻烦事，是没有必要去做的。</li>
<li>许多不同的Java虚拟机(JVM)有着非常不同的特性:</li>
</ul>


<p>-Sun的HotSpot Client JVM会做一些优化，但是通常优先于快速启动，而不是深度优化。</p>

<p>-Sun的HotSpot Server JVM(使用-server参数，在微软Windows不可用)会牺牲很长的启动时间来做非常深度的优化。</p>

<p>-相对于Sun的HotSpot Server JVM，IBM的JVM会做非常深度的优化。</p>

<p>-J2ME(移动手机)和PersonalJava(一些PDA)实现的JVM不会包括JIT编译器，很可能不会做任何的优化。
所以，在这种情况下，在你的java代码中尽可能地做自我优化就显得更加重要了。</p>

<p>-对于Oracle的JVM，Kaffe JVM,Intel的Open Runtime Platform,IBM的Jikes RVM等等，我不知道它们的优化特性。</p>

<p>你可以命令行提示符中敲入java -version来看看你正在使用的什么样的JVM。</p>

<h4>1.15 性能分析(Profiling)</h4>

<p>假如一个java程序好像很慢，尝试对程序的运行进行性能分析。假设1.3节里边进行重复字符串连接的例子存放在文件MyExample.java
里边。可以使用Sun的HostSpot JVM来进行编译和性能分析,像下面这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javac -g MyExample.java
</span><span class='line'>java -Xprof MyExample 10000
</span></code></pre></td></tr></table></div></figure>


<p>性能分析的结果会展示在标准输出里边(控制台):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Flat profile of 19.00 secs <span class="o">(</span>223 total ticks<span class="o">)</span>: main
</span><span class='line'>  Interpreted + native Method
</span><span class='line'>  1.3% 1      + 0      java.lang.AbstractStringBuilder.append
</span><span class='line'>  1.3% 1      + 0      java.lang.String.&lt;init&gt;
</span><span class='line'>  2.6% 2      + 0      Total interpreted
</span><span class='line'>
</span><span class='line'>  Compiled + native Method
</span><span class='line'>  51.3% 0  + 40     java.lang.AbstractStringBuilder.expandCapacity
</span><span class='line'>  29.5% 23 + 0      java.lang.AbstractStringBuilder.append
</span><span class='line'>  10.3% 8  + 0      java.lang.StringBuilder.toString
</span><span class='line'>  6.4% 0   + 5      java.lang.String.&lt;init&gt;
</span><span class='line'>  97.4% 31 + 45     Total compiled
</span><span class='line'>
</span><span class='line'>  Thread-local ticks:
</span><span class='line'>  65.0% 145 Blocked <span class="o">(</span>of total<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Flat profile of 0.01 secs <span class="o">(</span>1 total ticks<span class="o">)</span>: DestroyJavaVM
</span><span class='line'>  Thread-local ticks:
</span><span class='line'>  100.0% 1 Blocked <span class="o">(</span>of total<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  Global summary of 19.01 seconds:
</span><span class='line'>  100.0% 929 Received ticks
</span><span class='line'>  74.6%  693 Received GC ticks
</span><span class='line'>  0.8%     7 Other VM operations
</span></code></pre></td></tr></table></div></figure>


<p>它表示有51.%的计算时间花费在原生(native)方法expandCapacity,
而且有29.5%花费在方法append上，这些方法都是出自类AbstractStringBuilder的。
这看上去是String的+和=惹的祸，因为它被编译成append方法调用。</p>

<p>但是下面部分的内容更有意义，它指出总时间的74.6%花费在垃圾回收上，
因此只有25%的时间用于实际计算。这指出一个严重的问题:几乎马上会变成垃圾的数据分配得太多了。</p>

<h3>2 降低空间消耗</h3>

<ul>
<li>在一个JVM中,数据是分配在调用栈(方法参数和本地变量)和堆(对象,包括字符串和数组)上的。
对于每个线程的执行都有隔离的栈，并且所有的线程使用共同的堆。一个线程的栈随着方法调用的
深度增长和收缩。对象，字符串和数组通过执行中的线程在堆中分配。他们的回收(垃圾回收)是通过
一个自发的垃圾回收器来处理的。</li>
<li>关于空间使用，这里有三个重要的方面: 分配率、保留区和碎片化:</li>
</ul>


<p>-分配率是指你的程序创建对象、字符串、数组的频率。
一个高的分配率会消耗时间(分配，对象初始化和销毁)和空间(因为垃圾回收可能会为了效率的原因留出更多的内存)，
即使分配的数据只有非常短的生命周期。</p>

<p>–保留区(Retention)是指活动的堆数据的总量，也就是说，在任何时间点，调用栈可以企及的堆数据。
高的保留区消耗空间(明显地)和时间(垃圾回收器必需对分配和消耗做更多的管理工作).</p>

<p>–碎片化是碎片的产生:小的、不使用的内存块。持续更大对象的分配，例如增长字符串或者数组，
可能会引起内存碎片化，留下很多没法使用的小内存片。
这样的碎片化消耗时间(在分配的时候寻找一个足够大的hole)和空间(因为碎片变得没用)。
大多数垃圾回收器小心避免碎片化，但是它可能需要花费时间和空间，在嵌入式JVM实现中可能做不到。</p>

<ul>
<li><p>空间泄露属于不需要或者意外的保留区(retention)，常常随着运行时间的增长引起内存消耗也直线上涨。
空间泄露是由活动变量的可企及的对象，字符串或数组引起的，而那些对象事实上不会再被使用到。
例如，假如你在HashMap中使用缓存计算结果，这就有可能出现:即使你不再需要这些计算结果，
但是她们在HashMap中还是可访问的。这可以通过使用WeakHashMap替代来避免这个问题。</p></li>
<li><p>一个深度尾递归(tail-recursive)方法可能造成空间泄露，所有应该写成一个循环。
但一个java编译器不会自动优化一个尾递归方法为一个循环，所以执行堆栈中可企及的所有数据将会被保留着，
直到方法返回。</p></li>
<li><p>垃圾回收器(通用的，标记-清除, 引用计数, two-space(注: 不知怎么翻译), 增量式, 压缩式 &#8230;)的类型
很影响分配率(allocation rate), 保留区(retention)和碎片化(fragmentation)的时间和空间效果。
然而，一个起作用的垃圾回收器就其本身而言，从来不会引起空间泄露。空间泄露是由你程序里边的错误引起的。</p></li>
<li><p>确保一个类所有对象中共享的不变属性是static的。这样始终只有一个属性被创建。
当所有Car对象有同样的icon时，不要这么写:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ImageIcon</span> <span class="n">symbol</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageIcon</span><span class="o">(</span><span class="s">&quot;porsche.gif&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该像这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="n">ImageIcon</span> <span class="n">symbol</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageIcon</span><span class="o">(</span><span class="s">&quot;porsche.gif&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当你不确定是否需要真的需要一个对象的时候，可以延迟分配:把分配推迟到它真正需要的时候(只分配一次)。
因为像下面这样的话，将会对每一个Car对象无条件创建一个Button，而Button可能永远不会通过getButton调用来访问:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JButton</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Car</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span> <span class="n">initialize</span> <span class="n">button</span> <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="n">JButton</span> <span class="nf">getButton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">button</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以在getButton中延迟分配Button:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Car</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="n">JButton</span> <span class="nf">getButton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">button</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// button not yet created, so create it</span>
</span><span class='line'>      <span class="n">button</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JButton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">...</span> <span class="n">initialize</span> <span class="n">button</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">button</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样会节省空间(Button对象)和时间(分配和初始化)。另一方面，假如button早知道是一定需要的话，
提前分配和初始化会更有效，可以避免getButton里边的判断(判空)。</p>

<h3>3 其他资源</h3>

<p>J.Noble和C.Weir的著作Small Memory Software,Addison-Wesley 2001,展示了一些受限内存系统的设计模式。
虽然不是所有建议都适用于java(例如它需要指示字运算(pointer arithmetics))，
即使有点模式说(pattern-speak)的问题，但是大多数还是有用的。</p>

<h3>4 致谢</h3>

<p>感谢Morten Larsen，Jyrki Katajainen和Eirik Maus提供的有用的建议。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重复代码处理模式]]></title>
    <link href="http://mccxj.github.com/blog/20130306_duplicate-code.html"/>
    <updated>2013-03-06T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/duplicate-code</id>
    <content type="html"><![CDATA[<p>最近在整改某项目几十个模块(子项目)的重复代码，整理的一些思路。
其实方法在重构一书早就说过了，我个人认为要多思考方法。类的职责，
用对象间进行协助的思路，来解决重复代码的问题。
对于快速找到某段重复代码的处理模式，这就是关键的地方。</p>

<h3>模块之间的重复代码</h3>

<ul>
<li>文件重复，但模块间通用，可推到基础模块，风险小，常见于基础工具类</li>
<li>文件重复，但与具体模块相关，说明依赖其他模块，不适合直接推到基础模块，调整较大，建议延后处理</li>
</ul>


<h3>模块内文件间的重复代码</h3>

<h4>强相关</h4>

<ul>
<li>直接删除一个，推上上层包结构，作为公共代码</li>
<li>差异为通用扩展时, 合并成一个</li>
<li>差异为特殊扩展时，采用继承方式，虽然不够彻底，但风险小</li>
</ul>


<h4>普通关联</h4>

<ul>
<li>以业务为准，公用包结构</li>
<li>重复部分推到父类，由两边继承</li>
<li>采用协助类，常见于较大粒度的对象协助</li>
</ul>


<h4>弱相关</h4>

<ul>
<li>重复代码进入工具类，适用于通用的场景</li>
<li>采用协助类，参与于较小粒度的对象协助</li>
</ul>


<h3>文件内方法间的重复代码</h3>

<ul>
<li>抽取私有方法作为优先考虑的方法，风险小，可操作性强，需要注意方法命名</li>
<li>抽取协作类，常见于私有方法过多、局部关联性强、复杂度过高等情况</li>
<li>由已经存在的类实现，常见于职责过大的情况</li>
<li>如果适用于通用逻辑，可以推到父类或工具类</li>
</ul>


<h3>小技巧</h3>

<ul>
<li>先抽取小方法，看清结构</li>
<li>有时候用循环代替排山倒海式代码</li>
<li>先简化再深化，分步骤处理</li>
<li>识别真正不一样的地方</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对RESTFul多了点理解]]></title>
    <link href="http://mccxj.github.com/blog/20130304_restful.html"/>
    <updated>2013-03-04T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/restful</id>
    <content type="html"><![CDATA[<h3>简报与REST</h3>

<p>上个月春节刚刚回来，就要交技术简报文章了。实在有点不知道写什么好，还好春节回去有准备些东西，不然就要悲剧了。
这次的主题选择的是REST。REST在国内外倒是很火热的主题了，不过在咱们公司里边很多人还是没接触过，完全没概念。
我觉得，这也的确是个不错的主题。</p>

<h3>主要内容</h3>

<p><img src="http://mccxj.github.com/assets/images/2013/restful.png" alt="RESTFul vs CURD" /></p>

<p>文章本身没什么特别，主要围绕资源来展开的，主要是给大家对REST,RESTFul等有点概念。
主要有这些部分:</p>

<ol>
<li>资源的名称与URI的关系，资源的概念很重要</li>
<li>获取资源的方式，主要是HTTP标准方法</li>
<li>资源的表述，如何表达资源的外在形式</li>
<li>资源的连通性，超媒体的概念一旦忽略就几乎等同于CRUD了</li>
<li>状态转移，区分应用状态和资源状态</li>
</ol>


<p>总体来看，在写这个文章的时候，对RESTFul多了点理解，主要是以前一些忽略的地方得到了加强。
整篇文章大概花了10页，主要以github API和ruby on rails作为例子。
<strong>个人认为，<a href="http://developer.github.com/">Github API</a>设计得是相当有参考意义的。</strong>值得参与RESTFul API设计的同行参考。</p>

<h3>推荐的书籍材料</h3>

<p>除了Github API,下面的一些材料也是我很喜欢的。特别是RESTful Web Services这本书，
里边的理论比较具有可操作性，并提出了面向资源的架构(ROA)，作为REST的实践方式，不妨学习一下。</p>

<ul>
<li><a href="http://www.redsaga.com/opendoc/REST_cn.pdf">架构风格与基于网络的软件架构设计</a></li>
<li><a href="http://book.douban.com/subject/3094230/">RESTful Web Services</a></li>
<li><a href="http://book.douban.com/subject/6837645/">RESTful Web Services Cookbook</a></li>
<li><a href="http://book.douban.com/subject/6937982/">REST API Design Rulebook</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迷你Maven]]></title>
    <link href="http://mccxj.github.com/blog/20130206_mini-maven.html"/>
    <updated>2013-02-06T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/mini-maven</id>
    <content type="html"><![CDATA[<h2><strong>根据<a href="http://www.juvenxu.com/mvn-def-guide/">Maven权威指南</a>编制的思维导图</strong></h2>

<h2>可以在Dropbox上下载到这个<a href="https://www.dropbox.com/s/mjn0efcr9n6ly97/%E8%BF%B7%E4%BD%A0Maven.xmind">xmind文件</a></h2>

<p><img src="http://mccxj.github.com/assets/images/2013/maven.png" alt="迷你Maven" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git分支让github page用上jekyll插件]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-plugin-with-git-branch.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-plugin-with-git-branch</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/jekyll-plugin-with-git-branch.png" alt="git分支让github page用上jekyll插件" /></p>

<p><strong>本博客已经在2013-3-9转换成octopress了,比这种手动方式要方便很多。</strong></p>

<p>github page是个不错的应用，可惜对jekyll有比较多的限制，特别是插件方面。
为了解决这个问题，我选择了分支来处理这个，大约就是source分支保存未编译的内容，
master分支保留生成的网站。下面是大概的操作过程，针对已有博客的迁移。</p>

<h3>迁移过程</h3>

<p>首先，到github上手动打一个分支出来，叫source分支。</p>

<p>接着，处理master分支，清除所有内容。注意git pull的功能是让本地可以识别到远程分支。
<strong>.nojekyll文件</strong>是让github page不启用jekyll生成网站，而是直接使用目录下的内容。
并把所有带下划线的目录都过滤掉。</p>

<div class="highlight"><pre><code class="bash"><span class="nb">cd </span>mccxj.github.com
git rm -fr *

touch .nojekyll
git add .nojekyll

<span class="c"># add _*/* to .gitignore</span>
vi .gitignore

git commit -a -m <span class="s2">&quot;remote all pages&quot;</span>
</code></pre></div>


<p>下面，继续处理source分支，其实基本保持不变就可以了，主要是生成网站内容。
<strong>带t的参数是让source跟踪远程source分支</strong>。我的jekyll是采用最新源码装的，命令参数有些变化，
请参考jekyll帮助，</p>

<div class="highlight"><pre><code class="bash">git checkout -t origin/source

<span class="nv">$ </span>git branch -a
  master
* <span class="nb">source</span>
<span class="nb">  </span>remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/source

<span class="c"># generate page to _site</span>
jekyll build
</code></pre></div>


<p>最后，切回master分支，并<strong>拷贝网站内容</strong>到根目录，然后把内容提交并push到远程即可。</p>

<div class="highlight"><pre><code class="bash">git checkout master

cp -r _site/* .

<span class="c"># add then commit</span>
git add / git commit

<span class="c"># push to remote branch</span>
git push origin master
</code></pre></div>


<h3>新写作流程</h3>

<p>现在已经迁移完成了，下面介绍一些新写作流程。</p>

<p>首先，<strong>注意要在source分支上工作</strong>，在提交到远程之前都是一样。</p>

<div class="highlight"><pre><code class="bash">git checkout <span class="nb">source</span>

<span class="c"># rake post title=&quot;xxxx&quot;</span>
<span class="c"># write something</span>
git add xxxx.md
git commit -m <span class="s2">&quot;add new post&quot;</span>

<span class="c"># jekyll build</span>
jekyll serve
</code></pre></div>


<p>当你确认完成，并生成网站内容后，切换到master分支处理。
<strong>注意需要提交两个分支</strong>，例如使用git push可以同时提交两个分支。</p>

<div class="highlight"><pre><code class="bash">git checkout master

cp -r _site/* .

<span class="c"># add then commit</span>
git add / git commit

<span class="c"># push to remote branch</span>
git push
</code></pre></div>


<p>还不算麻烦吧，其实我是尝试切换到<a href="http://octopress.org/">octopress</a>，发现有不少地方出现问题，才采用这种方式的。Enjoy It!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll插件:支持URL跳转]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-alias-generator.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-alias-generator</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/jekyll-alias-generator.png" alt="jekyll插件:支持URL跳转" /></p>

<p>github page不支持.htaccess功能(参考<a href="http://rawsyntax.com/blog/blogging-on-jekyll-url-redirects/">Blogging on Jekyll: URL Redirects</a>)，
所以发生URL调整的时候，无法让原有路径自动跳转到新路径。
<a href="http://github.com/tsmango/jekyll_alias_generator">Alias generator</a>这个插件提供了一个解决方案，就是生成多一个页面，采用auto refresh的方式跳转到新路径。</p>

<p>这次我也调整了一些博客的路径，我也采用了这个方式。不过我只对当前已有的页面生成一次，以后的就不用这个插件了。
另外，我不想去修改每个页面的alias标签，所以我调整了代码，只对我的url规则进行处理。下面是我使用的版本。</p>

<div><script src='https://gist.github.com/4645990.js?file=alias_generator.rb'></script>
<noscript><pre><code># Alias Generator for Posts.
#
# Example:
#   alias /20121010_hello.html to /blog/20121010_hello.html
#   alias /hello.html to /pages/20121010_hello.html
#
# Place the full path of the alias (place to redirect from) inside the
# destination post's YAML Front Matter. One or more aliases may be given.
#
# Forked from Thomas Mango 's jekyll_alias_generator
# At http://github.com/tsmango/jekyll_alias_generator
# PLugin License: MIT

module Jekyll

  class AliasGenerator &lt; Generator

    def generate(site)
      @site = site

      process_posts
      process_pages
    end

    def process_posts
      # alias /20121010_hello.html to /blog/20121010_hello.html
      @site.posts.each do |post|
        generate_aliases(post.url, &quot;\/#{$1}&quot;) if /^\/blog\/(.+)$/ =~ post.url
      end
    end

    def process_pages
      # alias /hello.html to /pages/20121010_hello.html
      @site.pages.each do |page|
        dest = page.destination('')
        generate_aliases(dest, &quot;\/#{$1}&quot;)  if /^\/pages\/(.+)$/ =~ dest
      end
    end

    def generate_aliases(destination_path, aliases)
      alias_paths ||= Array.new
      alias_paths &lt;&lt; aliases
      alias_paths.compact!

      alias_paths.flatten.each do |alias_path|
        alias_path = alias_path.to_s

        alias_dir  = File.extname(alias_path).empty? ? alias_path : File.dirname(alias_path)
        alias_file = File.extname(alias_path).empty? ? &quot;index.html&quot; : File.basename(alias_path)
        fs_path_to_dir   = File.join(@site.dest, alias_dir)
        alias_index_path = File.join(alias_dir, alias_file)

        FileUtils.mkdir_p(fs_path_to_dir)

        File.open(File.join(fs_path_to_dir, alias_file), 'w') do |file|
          file.write(alias_template(destination_path))
        end

        (alias_index_path.split('/').size + 1).times do |sections|
          @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_index_path.split('/')[0, sections].join('/'), nil)
        end
      end
    end

    def alias_template(destination_path)
      &lt;&lt;-EOF
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
      &lt;head&gt;
      &lt;link rel=&quot;canonical&quot; href=&quot;#{destination_path}&quot;/&gt;
      &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=#{destination_path}&quot; /&gt;
      &lt;/head&gt;
      &lt;/html&gt;
      EOF
    end
  end

  class AliasFile &lt; StaticFile
    require 'set'

    def destination(dest)
      File.join(dest, @dir)
    end

    def modified?
      return false
    end

    def write(dest)
      return true
    end
  end
end</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll插件:嵌入github gist]]></title>
    <link href="http://mccxj.github.com/blog/20130127_gist-tag-blog.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/gist-tag-blog</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/gist-tag-blog.png" alt="jekyll插件:嵌入github gist" /></p>

<p>gist是gtihub的一个代码块功能，用来粘贴一些比较长的代码还是挺有用的。
github page可以直接嵌入gist，并且能显示高亮。
不过我不想太依赖gist，所以<strong>修改成使用pygments高亮的方式</strong>。
看看下面gist_tag.rb这个插件的效果:</p>

<div><script src='https://gist.github.com/4648237.js?file=gist_tag.rb'></script>
<noscript><pre><code>require 'cgi'
require 'digest/md5'
require 'net/https'
require 'uri'

module Jekyll
  class GistTag &lt; Liquid::Tag
    include Liquid::StandardFilters
    def initialize(tag_name, text, token)
      super
      @text           = text
      @options        = {:encoding =&gt; &quot;utf-8&quot;}
      @cache_disabled = false
      @cache_folder   = File.expand_path &quot;../_gist_cache&quot;, File.dirname(__FILE__)
      FileUtils.mkdir_p @cache_folder
    end

    def render(context)
      if parts = @text.match(/([\d]*) lang=(.+) (.*)/)
        gist, @lang, file = parts[1].strip, parts[2].strip, parts[3].strip
        script_url = script_url_for gist, file
        code       = get_cached_gist(gist, file) || get_gist_from_web(gist, file)

        context.registers[:site].pygments
        html_output_for context, script_url, code
      else
        &quot;&quot;
      end
    end

    def html_output_for(context, script_url, code)
      if context.registers[:site].pygments
        output = add_code_tags(Pygments.highlight(code, :lexer =&gt; @lang, :options =&gt; @options))
      else
        render_codehighlighter(code)
      end
    end

    def add_code_tags(code)
      # Add nested &lt;code&gt; tags to code blocks
      code = code.sub(/&lt;pre&gt;/,'&lt;pre&gt;&lt;code class=&quot;#{@lang}&quot;&gt;')
      code = code.sub(/&lt;\/pre&gt;/,&quot;&lt;/code&gt;&lt;/pre&gt;&quot;)
    end

    def render_codehighlighter(code)
      #The div is required because RDiscount blows ass
      &lt;&lt;-HTML
&lt;div&gt;
  &lt;pre&gt;&lt;code class='#{@lang}'&gt;#{h(code).strip}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
      HTML
    end

    def script_url_for(gist_id, filename)
      &quot;https://gist.github.com/#{gist_id}.js?file=#{filename}&quot;
    end

    def get_gist_url_for(gist, file)
      &quot;https://raw.github.com/gist/#{gist}/#{file}&quot;
    end

    def cache(gist, file, data)
      cache_file = get_cache_file_for gist, file
      File.open(cache_file, &quot;w&quot;) do |io|
        io.write data
      end
    end

    def get_cached_gist(gist, file)
      return nil if @cache_disabled
      cache_file = get_cache_file_for gist, file
      File.read cache_file if File.exist? cache_file
    end

    def get_cache_file_for(gist, file)
      bad_chars = /[^a-zA-Z0-9\-_.]/
      gist      = gist.gsub bad_chars, ''
      file      = file.gsub bad_chars, ''
      md5       = Digest::MD5.hexdigest &quot;#{gist}-#{file}&quot;
      File.join @cache_folder, &quot;#{gist}-#{file}-#{md5}.cache&quot;
    end

    def get_gist_from_web(gist, file)
      gist_url          = get_gist_url_for gist, file
      raw_uri           = URI.parse gist_url
      https             = Net::HTTP.new raw_uri.host, raw_uri.port
      https.use_ssl     = true
      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
      request           = Net::HTTP::Get.new raw_uri.request_uri
      data              = https.request request
      data              = data.body
      cache gist, file, data unless @cache_disabled
      data
    end
  end

  class GistTagNoCache &lt; GistTag
    def initialize(tag_name, text, token)
      super
      @cache_disabled = true
    end
  end
end

Liquid::Template.register_tag('gist', Jekyll::GistTag)
Liquid::Template.register_tag('gistnocache', Jekyll::GistTagNoCache)</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Async Javascript读书笔记]]></title>
    <link href="http://mccxj.github.com/blog/20130121_async-javascript.html"/>
    <updated>2013-01-21T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/async-javascript</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/async-javascript.jpg" alt="Async Javascript" /></p>

<p>这篇读书笔记的主要内容是在家里用ipad上输入的，感觉输入还是比较吃力呀。</p>

<p>本书的副标题是Build More Responsive Apps with Less Code，
关键词是异步、响应式，主要是对如何书写异步js代码提供一些指导意见，描述js的异步特性，回调代码的书写，还介绍了PubSub、Promises等通用模式。
最后介绍了worker多线程模型，js异步加载等内容。书的页数可谓少得可怜，内容还算比较实在，
提供了大量的开源库实现供读者参考，对于框架选型的话倒是可以参考一下。</p>

<h2>js事件</h2>

<p>主要是了解事件背后的本质。提供了象setTimeout document.onready都是事件的典型案例。
因为js基本都是单线程模型，所以事件的触发和代码的执行有时候并不一致，而是有些时间差。即使是setTimeout(fn,0)这样的代码。
这样的逻辑也不是立即执行的。它的执行模型大概是这样的(在ipad上手绘的)。
<img src="http://mccxj.github.com/assets/images/2013/runjs.jpg" alt="js执行模型" /></p>

<p>任何回调方法的执行都是需要按队列顺序来执行。如果当前代码没有执行完,就不会执行其他回调方法。
因此理解js的异步处理模型非常重要，<strong>代码应该尽快执行完毕，避免阻塞其他代码的执行</strong>。</p>

<h2>哪些是异步逻辑</h2>

<p>主要是一些io操作。例如</p>

<ol>
<li>ajax调用</li>
<li>webkit里边的console.log</li>
<li>dom操作，浏览器可能会延迟的效果出现</li>
<li>Node服务端里边比比皆是</li>
</ol>


<p>当然还有些是时间片操作。例如</p>

<ol>
<li>setTimeout或setInterval</li>
<li>node的<a href="http://nodejs.org/docs/latest/api/process.html">process.nextTick</a></li>
<li>html5提供的requestAnimationFrame等特性</li>
</ol>


<h2>异步逻辑注意</h2>

<p>如果使用回调方法进行异步处理，就不要在后面的代码中按同步的逻辑来考虑。<br/>
异步回调方法中用到的对象也应该先定义，避免由于缓存等造成奇怪的问题。<br/>
可以使用web worker api或异步调用来生成缓存数据。<br/>
避免超过两层的回调方法。</p>

<h2>处理错误</h2>

<p>使用异步调用时，stack trace可能会不全<br/>
使用异步调用时，try-catch可能会失效<br/>
使用err来作为回调方法的参数，或者区分success和error的回调方法<br/>
处理uncaught异常，可以使用:</p>

<div class="highlight"><pre><code class="javascript"><span class="err">#</span> <span class="nx">Broswer</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
<span class="p">}</span>

<span class="err">#</span> <span class="nx">Node</span> 
<span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;uncaughtException&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
<span class="p">})</span>
</code></pre></div>


<h2>流程控制</h2>

<p>回调方法太多，流程控制变得异常困难，很容易造成错误，应该避免超过两层的回调方法。
比较常用的办法有PubSub、Promises等解决方案/模式。</p>

<h3>PubSub</h3>

<p>就是publish/subscribe,发布订阅，常见的监听器模式。通常是把回调方法组织为带名字的事件，模拟事件触发。例如</p>

<ol>
<li>Node的<a href="http://nodejs.org/api/events.html">EventEmitter</a></li>
<li>Backbone的<a href="http://backbonejs.org/#Events">Event</a>模型</li>
<li>jQuery的<a href="http://api.jquery.com/on/">自定义事件</a></li>
</ol>


<p>需要注意的是，<strong>PubSub模式的逻辑不一定是异步的</strong>。
如果trigger是同步逻辑，应该注意避免在回调方法中再次trigger某个事件而造成死循环，
例如jQuery就可能出现这个问题，而像<a href="http://backbonejs.org/">backbone</a>在值没有变化时不再触发change事件，也提供了slient的选项。而<a href="http://emberjs.com/">Ember</a>之类是采用setTimeout的方式
加入队列进行处理的方式，就是采用了异步的方式。</p>

<h3>Promises</h3>

<p>书中主要使用了jquery做例子，显示了<a href="http://api.jquery.com/jQuery.Deferred/">deferred</a>的用法，对callback的用法有个比较。
熟悉jquery的童鞋通过Deferred的用法就有个大体的印象了。我个人的感觉就是，Promises模型是对PubSub常用功能的抽象，
有点规范的意思，事实上也的确有commonjs的<a href="http://wiki.commonjs.org/wiki/Promises/A">Promises/A</a>规范。</p>

<p>介绍了promises和deferred的区别，deferred是promises一个子集，它不能自己控制状态变更，需要有由其他事件出触发。
对于node来说，现在是采用回调方法的方式，要采用deferred方式，主要做些改变。例如：</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">deferredCallback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deferred</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
    <span class="p">};</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">fileReading</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="nx">deferredCallback</span><span class="p">(</span><span class="nx">fileReading</span><span class="p">));</span>
</code></pre></div>


<h2>Async.js</h2>

<p>介绍了async.js的用法，用来解决异步处理中的流程控制问题，例如iterator的问题。包括串行和并行的控制。
这个库还提供了更加复杂的并发性控制。具体的用法还是看<a href="https://github.com/caolan/async">官方的介绍</a>吧。还提供了另外一个库<a href="https://github.com/creationix/step">step</a>的介绍</p>

<h2>Worker</h2>

<p>提供<a href="http://www.w3.org/TR/workers/">worker</a>的功能，在浏览器上worker还是有一些受限制的地方，例如不能涉及DOM。
而在node上，可以用<a href="http://nodejs.org/api/cluster.html">cluster</a>来支持类似worker的功能。</p>

<h2>异步加载js</h2>

<p>主要探讨了几种方案，如在head加载，缺点是页面显示太慢。在body末尾加载，问题是还是要等js结束还能让事件生效，并且同样需要顺序加载。
解决方案有<a href="http://www.w3schools.com/tags/att_script_defer.asp">defer</a>/<a href="http://www.w3schools.com/tags/att_script_async.asp">async</a>和ajax加载等方案。</p>

<p>对于比较现代的浏览器，支持defer关键字用于异步js加载，还有async关键字，区别是后者不会顺序加载，先加载完先处理。
async在有些插件化的js时async可能可以用到，其他就很难用到，因为很多js都是存在依赖的关系。</p>

<p>当然，还有一些介绍了自定义的异步加载方案，如html5对象有onready事件,还有ajax加载方式。
不过业界已经有些比较成熟的异步加载库了，如<a href="http://yepnopejs.com/">yepnope</a></p>

<p>最后还介绍了一些异步加载的其他方案，例如增强的语法来支持异步逻辑。这种预编译的方式，我感觉不如在coffeescript上增加关键字的预处理方式，
类似coffeescript的class关键字。另外还介绍<a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&amp;redirectslug=New_in_JavaScript_1.7">js1.7</a>关于异步逻辑的新特性:Generator。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客写作小结]]></title>
    <link href="http://mccxj.github.com/blog/20130120_how-to-blog.html"/>
    <updated>2013-01-20T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/how-to-blog</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/howtoblog.jpg" alt="博客写作" />
这是前两天在家里用手机敲的文字记录，小小的总结，希望对<strong>写作信心不足</strong>的童鞋有所帮助。</p>

<p>写博客，<strong>不需要太在意写作技巧</strong>，文学性的问题，只需要<strong>把事情描述出来</strong>就可以了。
假如有个场景是水龙头漏水，写下来的是什么偷税漏税，积少成多的东西，那是文学。不需要想得那么远，能赶紧把事情描述好，赶紧修理好就行了。
单纯的记录，本身已经很难能可贵了，但很多时候我们连这个都做不到。</p>

<p>我以前写过很多博文，里边有很多是<strong>流水账的记录方式</strong>，有个基本的格式:
今天发生什么了，我觉得怎么样，假如这样的话会怎那样。基本是想到什么就敲什么，很简单吧。
我觉得这个方法的好处是<strong>培养写作的信心</strong>，因为这样比较容易出内容嘛。坚持写，<strong>写得越久越容易有信心写下去</strong>。</p>

<p>虽然读者对象很重要，但是一开始也没有多少读者，所以不需要太在意读者是谁，<strong>把自己当成唯一的读者</strong>就好了，
对自己负责，不求内容精妙，但求格式工整，不是火星文。<strong>字数多少不在意</strong>，能写多少就写多少。</p>

<p>一开始很难写出什么内容，只要坚持写就行了，慢慢就会写好了。
经常回顾，<strong>多看看自己写的内容</strong>，<strong>对比别人写的内容</strong>，找到差距，有针对性的提高写作技巧，例如多模仿。</p>

<p>如果有可能，<strong>为自己的博客做一下分享推广</strong>，让别人参与讨论，可以增强自己写作的信心，也可能得到很多的灵感，在以后写的更好。
推广的方式可以考虑rss订阅，邮件分享，微博等。</p>

<p><strong>博客系统尽量找简单点的</strong>，以前我使用blogspot就是因为界面比较简洁，还有像<a href="http://svbtle.com/">Svbtle</a>/<a href="http://natewienert.com/codename-obtvse">Obtvse</a>这样的<a href="http://www.36kr.com/p/93438.html">简约风格博客平台</a>
像wordpress之类的系统，适合喜欢折腾的人:) 最近比较流行的是像<a href="http://pages.github.com">github page</a>和<a href="http://jekyllrb.com/">jekyll</a>这样的静态页面生成方式，还是比较适合it人的,
我现在也是使用<a href="http://mccxj.github.com/blog/20120622_new-blog-in-github.html">这套系统</a>。</p>

<p>最后，<strong>马上动手，enjoy it</strong>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抢票插件搞得上github page都要轻功]]></title>
    <link href="http://mccxj.github.com/blog/20130120_github-across-gfw.html"/>
    <updated>2013-01-20T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/github-across-gfw</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/acrossgfw.jpg" alt="抢票插件搞得上github page都要轻功" /></p>

<p>春运临近，浏览器抢票软件也变得流行，没回来那几天就看到新闻说:<a href="http://www.oschina.net/news/36770/12306_ticket_helper">12306 抢票版插件拖垮 Github 服务器</a>
，没想到回来之后就发现github page不能用了，正确的说应该是github的子域名都不能用了，看来是贴倒部和宫刑部的新春贺礼来的。</p>

<h2>抢票插件和github什么关系</h2>

<p>抢票插件引用了github上的一个js文件，但github有个安全检测，当访问比较频繁的时候就会直接返回403 forbidden。
然后作者没多想就在插件里加了个重试机制。如果返回的是403就每5秒重试一次，并且是永久重试，结果github认为你访问的更频繁了于是一直返回403。
可想而知这就成了死循环，使用插件的用户一多，对github而言就产生DDOS了。
换句话说，这是github的一种安全机制而已，抢票插件和github基本没什么关系，有关部门的做法更是弱智得不行呀。:)</p>

<h2>轻功之ssh</h2>

<p>以前用过free gate这种东西，不过不大稳定，而且感觉风险比较高。呵呵，你懂的。<br/>
<a href="http://www.ssh110.com/help.html">ssh使用帮助</a>,跟人感觉用ssh命令行配合chrome插件是最方便的。<br/>
<a href="http://blog.onlybird.com/%E5%85%8D%E8%B4%B9ssh%E4%BB%A3%E7%90%86">免费ssh代理</a>,速度还不错，不过不是特别稳定。<br/>
<a href="http://wendal.net/2013/0108.html">Nutz福利之轻功</a>,应该不错,不过我还没用上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把时间当作朋友读书笔记]]></title>
    <link href="http://mccxj.github.com/blog/20130113_to-be-times-friend.html"/>
    <updated>2013-01-13T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/to-be-times-friend</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/tobe-times-friend.gif" alt="把时间当作朋友" /></p>

<p>刚读到这本书的时候，有种相见恨晚的感觉。不同于一般的时间管理类书籍，无病呻吟式的洗脑不见了，例子也少了强加因果关系的痕迹，有些观点印象比较深，值得一读。下面是一些比较有感觉的部分，和大家分享一下。</p>

<h3>欲望</h3>

<p>人希望欲望尽快得到满足。这是人性，所以衍生了速成，不劳而获，学习浮于表面这些浮躁的社会现象。在这之前，我真的没有意识到这是人性本质的的一种表现，对于有些新同事急于求成的想法，甚至是自己，也经常有难以理解的感觉。没能理解到这点，就很难说感同身受了。</p>

<h3>成功学</h3>

<p>虽然我也读过一些成功人士的经验之谈，我向来对成功学理论不大感冒，因为多读几本就会发现，他们经常夸大某一方面对结果的影响，很多例子也很牵强，再加上环境的不同，这些经历基本是不可复制的。李老师在书中也反复强调，要警惕成功学，要有自己的独立思考。独立思考，成熟心智，管理自我，才是书中强调的思想。</p>

<h3>时间管理</h3>

<p>读书，除了希望能找到不同的观点，还希望能有些支持这些观点的可操作性方案。其实关于时间管理方面的著作，我也知道一些，例如使用TODO，GTD等工具，番茄工作法。 李老师也有类似的一些做法，例如代办列表，下一阶段代办列表，每日事项回顾。关于每天晚上回顾做了那些事，这个在其他书上没有特别指出，不过李老师提到的回顾发现没什么可以写的尴尬，我也经常遇到。让我产生这些做法不可靠的感觉，后来才发现，这个和代办事项的优先级与难度有关。自己经常会倾向于先完成熟悉的，简单的，感兴趣的，而不是重要的，困难的。这样即使看上去完成很多东西，回顾的时候发现没什么可以值得一提的事情。</p>

<h3>计划</h3>

<p>计划不如变化快，但我们还是需要计划的。关于计划，我发现自己经常高估自己的能力，这个需要多考虑意外，给自己心理估计时间多加一段时间，并且把计划细分，对于不熟悉不感兴趣的事情，更应该如此，把时间分为多个时间片，不断接近目标。书中关于这部分的内容和番茄工作法的理论有交叉，个人感觉番茄工作的理论更详细和有针对性些吧！</p>

<h3>有趣言语</h3>

<p>李老师常说的一句话是，相信我，你并不孤单。并引用了正态分布的理论，使得这句话特别的深刻。整本书妙语连珠，读起来比较轻松。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用wunderlist进行TODO管理]]></title>
    <link href="http://mccxj.github.com/blog/20130103_how-to-wunderlist.html"/>
    <updated>2013-01-03T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/how-to-wunderlist</id>
    <content type="html"><![CDATA[<p><img src="http://mccxj.github.com/assets/images/2013/wunderlist.jpg" alt="Wunderlist" /></p>

<p>Wunderlist是一个TODO管理工具，支持多种客户端的同步，在多个客户端中的界面风格不会差别很大，实用性、可操作性都相当不错。
关于这类TODO工具的具体使用，我就不再长篇累牍了。<strong>这里主要结合wundeler，讲讲自己对TODO管理的经验教训</strong>。</p>

<p>首先，要焦距于你需要处理的事情，而不是你使用的工具。无论使用怎样的工具，都应该把焦点放在TODO事项上。
有些人喜欢玩弄软件的新功能，我也经常迷恋于寻找软件的功能而忽略事情的本身，导致浪费在使用软件上的时间太多。
所以使用TODO工具，<strong>关键是TODO事项是否能够有计划的进行</strong>。</p>

<p>其次，<strong>工具尽量要简单实用</strong>，在使用某个工具的时候，有时候感觉功能有所缺失，所以有些人可能会尝试不同的工具或者在多个工具换来换去，
试图寻找那完美的工具。说实在，这个成本太高了，多关注待处理的问题本身吧，多反向思考:真的需要这个功能么?频繁使用么?
就wunderlist来说，我也感觉缺少些功能，例如结合日历功能，有时候同步会有些问题。不过这些都不影响我使用关键功能，也让我能够
焦距于TODO本身。</p>

<p>最后，说说我使用wunderlist的方式吧。一般来说，我会在某天当做一个周期的开始，<strong>把我能够想到的TODO事项记录上去</strong>，不区分轻重缓急，
也不考虑工作量和时间因素，也不管是工作、生活还是学习的范畴。总之有多少就写多少，如果事项比较大并且有些明显的分割点，<strong>我也会拆分成多个TODO</strong>。
然后开始对任务进行挑选，得到需要处理的事情列表，如果列表太长，会把某些重要和紧急的进行加星。这样就可以<strong>让关注的事情就在一定的范围之内</strong>。
从这部分列表中挑选事项，<strong>集中精神逐项处理</strong>。周而复始，这样<strong>让每天都可以看到成果</strong>，激发自己的动力。</p>

<p>ps: 我不是什么GTD专家，仅供参考。不过wunderlist真的是不错的TODO工具，推荐使用。</p>
]]></content>
  </entry>
  
</feed>
