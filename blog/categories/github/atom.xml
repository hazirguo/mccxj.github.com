<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-03-10T22:33:16+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git分支让github page用上jekyll插件]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-plugin-with-git-branch.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-plugin-with-git-branch</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/jekyll-plugin-with-git-branch.png" alt="git分支让github page用上jekyll插件" /></p>

<p><strong>本博客已经在2013-3-9转换成octopress了,比这种手动方式要方便很多。</strong></p>

<p>github page是个不错的应用，可惜对jekyll有比较多的限制，特别是插件方面。
为了解决这个问题，我选择了分支来处理这个，大约就是source分支保存未编译的内容，
master分支保留生成的网站。下面是大概的操作过程，针对已有博客的迁移。</p>

<h3>迁移过程</h3>

<p>首先，到github上手动打一个分支出来，叫source分支。</p>

<p>接着，处理master分支，清除所有内容。注意git pull的功能是让本地可以识别到远程分支。
<strong>.nojekyll文件</strong>是让github page不启用jekyll生成网站，而是直接使用目录下的内容。
并把所有带下划线的目录都过滤掉。
{% highlight bash %}
cd mccxj.github.com
git rm -fr *</p>

<p>touch .nojekyll
git add .nojekyll</p>

<h1>add _<em>/</em> to .gitignore</h1>

<p>vi .gitignore</p>

<p>git commit -a -m "remote all pages"
{% endhighlight %}</p>

<p>下面，继续处理source分支，其实基本保持不变就可以了，主要是生成网站内容。
<strong>带t的参数是让source跟踪远程source分支</strong>。我的jekyll是采用最新源码装的，命令参数有些变化，
请参考jekyll帮助，
{% highlight bash %}
git checkout -t origin/source</p>

<p>$ git branch -a
  master
* source
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/source</p>

<h1>generate page to _site</h1>

<p>jekyll build
{% endhighlight %}</p>

<p>最后，切回master分支，并<strong>拷贝网站内容</strong>到根目录，然后把内容提交并push到远程即可。
{% highlight bash %}
git checkout master</p>

<p>cp -r _site/* .</p>

<h1>add then commit</h1>

<p>git add / git commit</p>

<h1>push to remote branch</h1>

<p>git push origin master
{% endhighlight %}</p>

<h3>新写作流程</h3>

<p>现在已经迁移完成了，下面介绍一些新写作流程。</p>

<p>首先，<strong>注意要在source分支上工作</strong>，在提交到远程之前都是一样。
{% highlight bash %}
git checkout source</p>

<h1>rake post title="xxxx"</h1>

<h1>write something</h1>

<p>git add xxxx.md
git commit -m "add new post"</p>

<h1>jekyll build</h1>

<p>jekyll serve
{% endhighlight %}</p>

<p>当你确认完成，并生成网站内容后，切换到master分支处理。
<strong>注意需要提交两个分支</strong>，例如使用git push可以同时提交两个分支。
{% highlight bash %}
git checkout master</p>

<p>cp -r _site/* .</p>

<h1>add then commit</h1>

<p>git add / git commit</p>

<h1>push to remote branch</h1>

<p>git push
{% endhighlight %}</p>

<p>还不算麻烦吧，其实我是尝试切换到<a href="http://octopress.org/">octopress</a>，发现有不少地方出现问题，才采用这种方式的。Enjoy It!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll插件:支持URL跳转]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-alias-generator.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-alias-generator</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/jekyll-alias-generator.png" alt="jekyll插件:支持URL跳转" /></p>

<p>github page不支持.htaccess功能(参考<a href="http://rawsyntax.com/blog/blogging-on-jekyll-url-redirects/">Blogging on Jekyll: URL Redirects</a>)，
所以发生URL调整的时候，无法让原有路径自动跳转到新路径。
<a href="http://github.com/tsmango/jekyll_alias_generator">Alias generator</a>这个插件提供了一个解决方案，就是生成多一个页面，采用auto refresh的方式跳转到新路径。</p>

<p>这次我也调整了一些博客的路径，我也采用了这个方式。不过我只对当前已有的页面生成一次，以后的就不用这个插件了。
另外，我不想去修改每个页面的alias标签，所以我调整了代码，只对我的url规则进行处理。下面是我使用的版本。</p>

<p>{% gist 4645990 alias_generator.rb %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll插件:嵌入github gist]]></title>
    <link href="http://mccxj.github.com/blog/20130127_gist-tag-blog.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/gist-tag-blog</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/gist-tag-blog.png" alt="jekyll插件:嵌入github gist" /></p>

<p>gist是gtihub的一个代码块功能，用来粘贴一些比较长的代码还是挺有用的。
github page可以直接嵌入gist，并且能显示高亮。
不过我不想太依赖gist，所以<strong>修改成使用pygments高亮的方式</strong>。
看看下面gist_tag.rb这个插件的效果:</p>

<p>{% gist 4648237 gist_tag.rb %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抢票插件搞得上github page都要轻功]]></title>
    <link href="http://mccxj.github.com/blog/20130120_github-across-gfw.html"/>
    <updated>2013-01-20T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/github-across-gfw</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/acrossgfw.jpg" alt="抢票插件搞得上github page都要轻功" /></p>

<p>春运临近，浏览器抢票软件也变得流行，没回来那几天就看到新闻说:<a href="http://www.oschina.net/news/36770/12306_ticket_helper">12306 抢票版插件拖垮 Github 服务器</a>
，没想到回来之后就发现github page不能用了，正确的说应该是github的子域名都不能用了，看来是贴倒部和宫刑部的新春贺礼来的。</p>

<h2>抢票插件和github什么关系</h2>

<p>抢票插件引用了github上的一个js文件，但github有个安全检测，当访问比较频繁的时候就会直接返回403 forbidden。
然后作者没多想就在插件里加了个重试机制。如果返回的是403就每5秒重试一次，并且是永久重试，结果github认为你访问的更频繁了于是一直返回403。
可想而知这就成了死循环，使用插件的用户一多，对github而言就产生DDOS了。
换句话说，这是github的一种安全机制而已，抢票插件和github基本没什么关系，有关部门的做法更是弱智得不行呀。:)</p>

<h2>轻功之ssh</h2>

<p>以前用过free gate这种东西，不过不大稳定，而且感觉风险比较高。呵呵，你懂的。<br/>
<a href="http://www.ssh110.com/help.html">ssh使用帮助</a>,跟人感觉用ssh命令行配合chrome插件是最方便的。<br/>
<a href="http://blog.onlybird.com/%E5%85%8D%E8%B4%B9ssh%E4%BB%A3%E7%90%86">免费ssh代理</a>,速度还不错，不过不是特别稳定。<br/>
<a href="http://wendal.net/2013/0108.html">Nutz福利之轻功</a>,应该不错,不过我还没用上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blog in github,新的开始]]></title>
    <link href="http://mccxj.github.com/blog/20120622_new-blog-in-github.html"/>
    <updated>2012-06-22T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/new-blog-in-github</id>
    <content type="html"><![CDATA[<h2>老掉牙的故事</h2>

<p>我写博客也不算新鲜事了，不过已经有2年没写过博客了。很早之前就有<a href="http://uptolife.blogspot.com" title="google blogspot">blogspot</a>和<a href="http://bonyfish.cn" title="blog">bonyfish.cn</a>，
blogspot是我最初的博客地址，因为我比较喜欢blogspot那种简洁的风格，只是后来在天朝无法访问，所以把数据迁移出来。
后来自己弄了个域名，用wordpress重新搭建了一个，又这样持续了一两天。
前后加起来写过超过1000篇大大小小的博客，只是因为各种原因，后来没有坚持下来，回想起来，还是有些可惜的。
不过，我手头上还是有一份完整的数据库备份，算是留个纪念。</p>

<h2>why blog, why github</h2>

<p>这两年的工作比较忙，这也是没坚持下来的原因之一，但同样也是这次想重新捡起来的主要动力。
在这家公司里边，忙已经成为一种常态，常常没有时间停下来思考，把好的东西沉淀下来。
这是一家感觉很特别的公司，有很多人很认真，却忙得一塌糊涂，没时间学习。
不得不说，这真是很无奈的一件事。但我不想这样，我需要时常回顾一下做过的事情，希望能从中获取到一些东西。
或许哪天我离开这家公司，我希望带走更多东西，而不只是一些钱和一个漂亮的工作简历。</p>

<p>为什么选择github作为博客？我非常喜欢github，它给我的体验非常好，我在公司弄的code diff工具也借鉴了github的review功能。
github的博客功能其实是一个只支持静态页面的page功能，相对于正式的博客来说，只能用简陋来形容，但它符合KISS原则，能够让我关注不至于过于分散。
借助<a href="https://github.com/mojombo/jekyll" title="jekyll">jekyll</a>和markdown标记语言来生成静态页面也很简单，稍微试了一下，符合我的要求:足够简单。</p>

<p>关于jekyll的更多内容，可以参考原作者的博文:<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">像黑客一样写博客</a>(<a href="http://kyle.xlau.org/posts/blogging-like-a-hacker.html">中文版</a>)</p>

<p>关于markdown的更多内容，可以参考这个教程:<a href="http://wowubuntu.com/markdown/">Markdown 语法说明</a>，你只要花半个小时到一个小时就差不多了。</p>

<p>我还整理了一个<a href="/20120629_problem-about-jekyll-and-markdown.html">使用jekyll和markdown中遇到的问题</a></p>

<h2>plan...and so on</h2>

<p>我是使用<a href="http://jekyllbootstrap.com/" title="jekyll bootstrap">Jekyll Bootstrap</a>弄的，因为我对<a href="http://twitter.github.com/bootstrap/" title="twitter bootstrap">twitter bootstrap</a>这套简洁的css框架还算了解。同时，我相信你也是喜欢上这个风格的。</p>

<p>我会争取一个星期至少更新一篇，这个频率虽然有点慢，但目标不要定太高，万事开头难嘛 :)
另外，我会抽时间整理一下以前老的博客，把还有点用的东西重新分享一番，但愿这些年没有白过了。</p>

<p>拭目以待吧!</p>
]]></content>
  </entry>
  
</feed>
