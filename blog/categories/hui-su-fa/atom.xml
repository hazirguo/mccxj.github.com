<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 回溯法 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/hui-su-fa/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-06-30T18:14:17+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[这些天,我们用到的算法]]></title>
    <link href="http://mccxj.github.com/blog/20130327_these-days-algorithms.html"/>
    <updated>2013-03-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/these-days-algorithms</id>
    <content type="html"><![CDATA[<p>平时做的应用，的确很少涉及非常具体的局部算法。不过最近一段时间还是遇到了一些，稍微整理一下，留个纪念。</p>

<h3>产品的组合生成</h3>

<p>举个例子，手机的颜色有黑白的，内存有16G,32G的，那么就有黑色16G,黑色32G，白色16G，黑色32G等组合项，
当然属性可能不止两项，想列出所有的组合项。</p>

<p>如果只有两种属性，很简单
``` java
for(属性 in 属性1)</p>

<pre><code>for(属性 in 属性2)
   // TODO 得到组合项
</code></pre>

<p>```</p>

<p>但是，如果有不定项的话，就不能这么写了。</p>

<p><strong>这需要知道点回溯法的技巧，我是用了非递归的方式编写的</strong>:</p>

<p>``` java</p>

<pre><code>public static List&lt;List&lt;String&gt;&gt; merge(List&lt;String&gt;... ls) {
    int len = ls.length;
    int[] pos = new int[len];//对i而言，表示第i种属性当前选择是哪个值
    Arrays.fill(pos, 0);
    String[] r = new String[len];//存放待生成的组合项

    List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;List&lt;String&gt;&gt;();
    int k = 0;//当前正在遍历第几种属性
    while (k &gt;= 0) {
        while (pos[k] &lt; ls[k].size()) {
            r[k] = ls[k].get(pos[k]);
            if (k == len - 1) {//是否已经是最后一个属性
                // 找到一个组合项，复制到res里边去
                pos[k] = pos[k] + 1;
            } else {
                k++;//当前位置的属性已经选择，处理下一种属性
            }
        }
        pos[k] = 0;
        k--;//当前位置的属性已经遍历完，需要回溯到上一种属性去
        if (k &gt; 0) {
            pos[k] = pos[k] + 1;
        }
    }
    return res;
}
</code></pre>

<p>```</p>

<p>说真的，即使加了注释，没有相关的算法基础，也是不容易看清楚的，所以有同事看到这个写法，在大呼救命。</p>

<h3>请求URL参数匹配</h3>

<p>最近有需求，要对请求里边的参数做匹配，规则是这样的：</p>

<p>例如有下面三条规则(其中问号表示变量，参数的顺序没关系):
* User=?&amp;Password=BB&amp;CurrentTab=LOG&amp;CurrentTab2=LOG
* User=?&amp;Password=?&amp;CurrentTab=LOG1
* User=?&amp;Password=?&amp;CurrentTab=LOG</p>

<p>如果请求参数是XX=222&amp;User=Q&amp;Password=BB&amp;CurrentTab=LOG，则只能匹配第三条，因为第一条多一个参数，第二条的值是LOG1，对应不上。<br/>
如果请求参数是User=QQ&amp;CurrentTab=LOG1&amp;Password=AA,同样只能匹配到第三条。</p>

<p>有个非常简单的思路，就是把参数拆开，然后一个个匹配。但是由于业务的请求数非常大，担心对系统是否有影响。</p>

<p>于是，弄了个测试原型，开50个线程的线程池，跑500个任务，每个任务跑1w次，匹配3个配置项。整个框架代码是这样的:
``` java</p>

<pre><code>public void work() throws Exception {

    final String match1 = "User=?&amp;Password=BB&amp;CurrentTab=LOG&amp;CurrentTab2=LOG";
    final String match2 = "User=?&amp;Password=?&amp;CurrentTab=LOG1";
    final String match3 = "User=?&amp;Password=?&amp;CurrentTab=LOG";

    ExecutorService pool = Executors.newFixedThreadPool(50);
    int tasksize = 500;
    final CountDownLatch latch = new CountDownLatch(tasksize);

    long s = System.nanoTime();
    for (int k = 0; k &lt; tasksize; k++) {
        pool.submit(new Runnable() {
            @Override
            public void run() {
                Random r = new Random(100000000);
                for (int i = 0; i &lt; 10000; i++) {
                    String toMatch = "XX="
                                     + r.nextInt()
                                     + "&amp;User=AA&amp;Password=BB&amp;CurrentTab=LOG";
                    // TODO 测试toMatch
                }
                latch.countDown();
            }
        });
    }

    latch.await();
    System.out.println(System.nanoTime() - s);
}
</code></pre>

<p>```</p>

<p>先用最简单的方法来做基准测试，有时候最简单的方法就可以满足要求了，粗略的代码如下:</p>

<p>``` java</p>

<pre><code>                    Map&lt;String, String&gt; matchs = new HashMap&lt;String, String&gt;();
                    String[] split = toMatch.split("&amp;");
                    for (String mss : split) {
                        String[] split2 = mss.split("=");
                        matchs.put(split2[0], split2[1]);
                    }
                    similar(match1, matchs);
                    similar(match2, matchs);
                    similar(match3, matchs);

                    ....

private boolean similar(String match, Map&lt;String, String&gt; matchs) {

    String[] ms = match.split("&amp;");
    for (String m : ms) {
        String[] split2 = m.split("=");
        if (!matchs.containsKey(split2[0]))
            return false;

        if (!"?".equals(split2[1])) {
            if (!split2[1].equals(matchs.get(split2[0])))
                return false;
        }
    }
    return true;
}                        
</code></pre>

<p>```</p>

<p>在我的机器上简单跑一下，大约要28s。这个算法非常暴力，用split和map结构搞定了。
如果用StringTokenizer的话，还能快些，我试了一下，把第一步split换了的话，大约需要25s.
<strong>我觉得这个效果也还是可以接受的。</strong></p>

<p>下面再用纯手工操作字符串的方式，代码如下:
``` java</p>

<pre><code>                    UrlMatcher matcher = new UrlMatcher(toMatch);
                    matcher.match(match1);
                    matcher.match(match2);
                    matcher.match(match3);

class UrlMatcher {
    private String toMatch;
    int[] pos = new int[20];
    int ps;

    public UrlMatcher(String toMatch) {
        int ss = 0;
        this.toMatch = toMatch;
        int len = toMatch.length();
        int st = 0;
        int ed = 0;
        for (int i = 0; i &lt; len; i++) {
            char c = toMatch.charAt(i);
            if (c == '=') {
                ed = i - 1;
                pos[ss++] = st;
                pos[ss++] = ed;
                st = i + 1;
                pos[ss++] = st;
            } else if (c == '&amp;') {
                pos[ss++] = i - 1;
                st = i + 1;
            }
        }
        pos[ss] = len - 1;
        ps = (ss + 1);
    }

    public boolean match(String m) {
        int len = m.length();
        int st = 0;
        int ed = 0;
        int vs = 0;
        int ve = 0;

        for (int i = 0; i &lt; len; i++) {
            char c = m.charAt(i);
            if (c == '=') {
                ed = i - 1;
                vs = i + 1;
            } else if (c == '&amp;') {
                ve = i - 1;

                if (!match2(m, st, ed, vs, ve)) {
                    return false;
                }

                st = i + 1;
            }
        }
        return match2(m, st, ed, vs, len - 1);
    }

    boolean match2(String m, int st, int ed, int vs, int ve) {
        boolean ma = true;
        for (int i = 0; i &lt; ps; i = i + 4) {
            if (pos[i + 1] - pos[i] == ed - st) {
                int sst = st - pos[i];
                for (int j = pos[i]; j &lt;= pos[i + 1]; j++) {
                    if (toMatch.charAt(j) != m.charAt(sst + j)) {
                        ma = false;
                    }
                }

                if (ma) {
                    if (ve == vs &amp;&amp; '?' == m.charAt(vs)) {
                        return true;
                    } else {
                        if (pos[i + 3] - pos[i + 2] == ve - vs) {
                            int vst = vs - pos[i + 2];
                            for (int j = pos[i + 2]; j &lt;= pos[i + 3]; j++) {
                                if (toMatch.charAt(j) != m.charAt(vst + j)) {
                                    return false;
                                }
                            }
                            return true;
                        } else {
                            return false;
                        }
                    }
                }

            }
        }
        return false;
    }
}                       
</code></pre>

<p>```</p>

<p>代码比较粗糙，对某些情况不是很严格，但不影响总体的性能评测，<strong>这个逻辑不到2s，要快15倍以上</strong>。
这个写法的特点是:<strong>使用数组而不是Map，使用标记位置而不是截取字符串，一次扫描。</strong></p>

<p><strong>不过，这个代码很粗糙，不要太当真。</strong></p>

<p>看看我机器上显示的虚拟机负载情况。</p>

<p>图1:最简单的做法
<img src="/assets/images/2013/match1.jpg" alt="简单方法+多线程" /></p>

<p>图2:手工打造，相对的内存消耗小些
<img src="/assets/images/2013/match2.jpg" alt="手工打造+多线程" /></p>

<p>图3:还是手工打造，不过单线程，相对来说CPU使用率就小很多了
<img src="/assets/images/2013/match3.jpg" alt="手工打造+单线程" /></p>

<h3>小结</h3>

<p>经常听到算法没什么用，算法没地方使用的论调，我也都一笑置之。
不过，<strong>我也承认，在现在的工作中，的确很少会直接面对非常具体的局部算法</strong>。
但我还是不能赞同上面的观点，<strong>毕竟有些场景还是不得不考虑的</strong>:</p>

<ol>
<li>做不到，没有算法的支持，根本不知怎么写好</li>
<li>做不好，简单的实现没法满足，需要高效的算法</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[马踏棋盘的算法思考]]></title>
    <link href="http://mccxj.github.com/blog/20120712_horse-riding-chessboard.html"/>
    <updated>2012-07-12T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/horse-riding-chessboard</id>
    <content type="html"><![CDATA[<h3>马踏棋盘</h3>

<p>将马随机放在国际象棋的8×8棋盘的某个方格中，马按走棋规则进行移动。
要求每个方格只进入一次，走遍棋盘上全部64个方格。</p>

<h3>又是回溯?</h3>

<p>这个做法和前面几个问题是差不多的(<a href="20120710_sudoku.html">数独(sudoku)游戏</a>)，所以这里就不做太多解释了。
总体来说，就是可选的解空间是8个方向。回溯的代码就不多提了，需要说的是，这里简单的回溯
效率不好，需要跑很久才出结果。我们有什么方式可以优化一下!</p>

<h3>贪心是否有效?</h3>

<p>首先，我们可以对可供选择的方向进行过滤，对于它相连的8个方向所在的点，
在当前的局面下，假如存在两个点只有一条路可以到达，那么可以直接回溯，
因为无论走哪个方向都不能走完整个棋盘。假如存在一个点，它只有一条路可以到达，
那么下一步必须走这个方向。</p>

<p>但是，即使我们过滤了一些路径，效率还是没有非常大的提升。我们需要考虑一种贪心的思路：
在可选的方向中，优先选择出口最少的目标点。因为优先选择出口少的点,
就可以让出口少的点尽量少，使得最后剩下的点有比较多的入口，这样最终达到目的的概率就会大些。</p>

<p>虽然这个思路，我觉得不好直接证明，不过我修改了一些代码实现，的确效率得到非常大的提升。
就我那个机器，ruby代码，不到1s，64个点的情况就全部处理完了。</p>

<h3>代码示例</h3>

<p>{% highlight ruby %}
def init
  @arr = Array.new(8)
  (0..7).each do |i| @arr[i] = Array.new(8, 0) end
  @path = Array.new(64)
  @ok = false
  @poss = [[-2, 1], [2, 1], [1, 2], [-1, 2], [2, -1], [-2, -1], [-1, -2], [1, -2]]
end</p>

<h1>判断[x,y]是否在棋盘内并未走过</h1>

<p>def valid?(x,y)
  x>=0 &amp;&amp; x<8 && y>=0 &amp;&amp; y&lt;8 &amp;&amp; @arr[x][y]==0
end</p>

<h1>判断当前点有哪些方向可以走</h1>

<p>def filter(mark)
  posz, mustpos = {}, nil
  a, b = @path[mark]
  @poss.each do |pos|</p>

<pre><code>axp, bxp = a+pos[0], b+pos[1]
if valid?(axp, bxp)
  sz = 0
  @poss.each do |ps|
    ap, bp = axp+ps[0], bxp+ps[1]
    sz+=1 if valid?(ap, bp) # 存在空点
  end
  if sz&gt;0
    posz[pos] = sz
  else
    mustpos.nil? ? (mustpos = pos) : (return [])
  end
end
</code></pre>

<p>  end
  # 对目标点的方向多寡进行排序
  mustpos.nil? ? posz.keys.sort {|a,b| posz[a]&lt;=>posz[b]} : [mustpos]
end</p>

<p>def walk(mark)
  if mark==63</p>

<pre><code>@ok = true
return
</code></pre>

<p>  end
  a, b = @path[mark]
  filter(mark).each do |pos|</p>

<pre><code>rp = [a+pos[0], b+pos[1]]
@path[mark+1] = rp
@arr[rp[0]][rp[1]] = 1
walk(mark+1)
@ok ? return : (@arr[rp[0]][rp[1]] = 0)
</code></pre>

<p>  end
end</p>

<p>(0..7).each do |i|
  (0..7).each do |j|</p>

<pre><code>init
@path[0] = [i,j]
@arr[i][j] = 1
walk(0)
if @ok
  @path.each_with_index do |ps, idx|
    @arr[ps[0]][ps[1]] = idx
  end
  @arr.each do |ar| p ar end
  puts
else
  "no solution"
end
</code></pre>

<p>  end
end
{% endhighlight %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数独(sudoku)游戏]]></title>
    <link href="http://mccxj.github.com/blog/20120710_sudoku.html"/>
    <updated>2012-07-10T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/sudoku</id>
    <content type="html"><![CDATA[<h3>数独游戏</h3>

<p>在9×9格的大九宫格中有9个3×3格的小九宫格，并提供17个以上的数字。
根据这些数字，利用逻辑和推理，在其它的空格上填入1到9的数字。
每个数字在每个小九宫格内只能出现一次，每个数字在每行、每列也只能出现一次。</p>

<h3>思路与数据结构</h3>

<p>使用回溯法来不断尝试就可以了，可以用一个二维数组来arr[9][9]表示整个数独，其中还没有填上的用0表示。
我们还需要有个方法来判断能否在[i,j]这个格子上填入某个值。
同样还需要一个变量来表示是否已经找到解。另外，我使用了mark(0~80)作为每个格子的序号，
深度搜索的时候就从0开始处理，直到mark=80的时候出现一个解。</p>

<h3>ruby代码示例</h3>

<p>{% highlight ruby %}</p>

<h1>判断能否在[i,j]上填入val</h1>

<p>def is_ok?(i,j,val)
  (0..8).each do |m|</p>

<pre><code>return false if @arr[i][m] == val &amp;&amp; m!=j #判断行不重复
return false if @arr[m][j] == val &amp;&amp; m!=i #判断列不重复
</code></pre>

<p>  end
  (i-i%3..i-i%3+2).each do |m|</p>

<pre><code>(j-j%3..j-j%3+2).each do |n|
  return false if @arr[m][n] == val &amp;&amp; i!=m &amp;&amp; j!=n #判断小九宫格不重复
end
</code></pre>

<p>  end
  true
end</p>

<h1>用来输出数独</h1>

<p>def print; (0..8).each { |m| p @arr[m] }; end</p>

<h1>用来表示是否找到解</h1>

<p>@ok = false</p>

<h1>处理序号为mark开始的格子</h1>

<p>def walk(mark)
  m, n = mark/9, mark%9
  val = @arr[m][n]
  # 当前已经有初始值的情况
  if val != 0</p>

<pre><code>mark == 80 ? @ok = true : walk(mark+1)
return
</code></pre>

<p>  end</p>

<p>  # 没有初始值的情况
  (1..9).each do |v|</p>

<pre><code>if is_ok?(m, n, v)
  @arr[m][n] = v
  @ok = true and return if mark==80 # 找到一个解
  walk(mark+1) #填好值之后，继续深度搜索
  return if @ok
end
</code></pre>

<p>  end
  @arr[m][n]=0 # 都处理完，没有找到就恢复
end</p>

<p>walk(0)
@ok ? print : (p "no solution")
{% endhighlight %}</p>

<h3>回溯法的基本步骤：</h3>

<ol>
<li>a定义问题的解空间</li>
<li>a确定易于搜索的解空间结构</li>
<li>a以深度优先搜索的策略搜索解空间，并在搜索过程中用剪枝函数避免无效搜索</li>
</ol>


<h3>回溯法的基本结构</h3>

<p>我们考虑递归的方式(比较容易理解)，递推的以后再讨论。
{% highlight ruby %}</p>

<h1>init</h1>

<p>flag = false # 标记是否找到解
u = {} # 已知解, 并假设(x1,x2....xn)为可选的解空间</p>

<p>def backtrack(k)
  (x1..xn).each do |x|</p>

<pre><code>if is_ok?(x, k) # 过滤无效的解
  u.add(x) # 把x加入已知解u
  backtrack(k+1) if u.is_part? # 部分解的情况，继续处理
  flag = true and exit if u.is_full? # 找到解并退出
  # fail的时候有可能需要对u进行恢复
end
</code></pre>

<p>  end
  # fail的时候有可能需要对u进行恢复
end</p>

<p>backtrack(1) # 从1开始搜索
flag ? p u : "no solution"
{% endhighlight %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一笔画游戏]]></title>
    <link href="http://mccxj.github.com/blog/20120709_one-line-drawing-game.html"/>
    <updated>2012-07-09T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/one-line-drawing-game</id>
    <content type="html"><![CDATA[<p>在android上看过一个一笔画的小游戏，规则很简单，要连续一笔，不能重复。
当然，到后面比较难的时候还会限制方向，有些线路必须走多次等等。并不是觉得这有游戏做得多么的好，或者很有创意。
我只是从程序员的角度来看问题，用程序是怎么处理的。
我们只需要尝试所有可能的路径就可以了，这里用了回朔法，是一种优化过的穷举，</p>

<p>先来考虑一下数据结构。我们给所有的点加上编号1-n，所有的连线可以用二维数组表示a[n+1][n+1]，值为0表示不可联通，
其他表示需要经过的次数(我实现的时候是采用类似稀疏矩阵的链表表示)。<br/>
至于给矩阵增加多一列，主要是考虑处理方便，还考虑到起始点不好确定，所以加个虚拟点，<br/>
同时增加虚拟点到其他n个点的连接，这样我们深度遍历的时候从虚拟点开始就可以了。<br/>
另外我们需要一个链表来存放走过的路径，还需要一个标记来表示找到路径，无需继续尝试。</p>

<p>初始化的伪代码如下，
{% highlight ruby %}
(0..n).each do |k| a[0][k]=1 end #虚拟点
@path = [] # 走过的路径
@ok=false # 标记是否完成
{% endhighlight %}</p>

<p>接下去我们需要一个回溯算法(参考<a href="20120710_sudoku.html">数独(sudoku)游戏</a>)，代码比较简单，这里就不展示代码示例了。</p>

<p>需要注意的是，找到一个可走的路径时(例如从i到j,a[i][j]>0)，深度遍历的时候需要对这个值减1，回溯的时候加1就可以了。
而对于走过的路径path，是否需要回退呢? 其实我们关心的是把刚刚走过的路径加入路径的正确位置，
如果选择数组的话，在回溯的时候就不可以不回退了，而对于链表，回退则是必要的。</p>

<p>总体来说，这个游戏的实现是比较简单的，有兴趣的同学可以自己实现一下。</p>
]]></content>
  </entry>
  
</feed>
