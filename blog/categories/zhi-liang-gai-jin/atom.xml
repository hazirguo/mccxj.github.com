<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 质量改进 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/zhi-liang-gai-jin/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-03-10T22:33:16+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[improve bitter code: 没有行为的封装]]></title>
    <link href="http://mccxj.github.com/blog/20120815_improve-bitter-code-9.html"/>
    <updated>2012-08-15T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/improve-bitter-code-9</id>
    <content type="html"><![CDATA[<p><strong>备注: 示例中的代码并不是真实代码的完全拷贝</strong></p>

<h3>常见的对象</h3>

<p>javabean这种java类是非常常见的，它有一些属性和相应的get/set方法。
我们还会看到pojo,vo这些概念，还有我们使用的一种特殊对象cbo，在外观上都是这种形式。</p>

<p>在项目的代码中，我们经常大量这种对象，它有私有变量，对每个私有变量都提供了get/set方法,除此之外，没有其他方法。
这种情况下，通常只需写好变量，然后用工具生成相应的访问器方法。</p>

<p>在最近修改一处代码的时候，就看到下面的逻辑，并且这段代码在多个文件出现过。
{% highlight java %}
PrepaidInput prepaid = ...// load from request</p>

<p>String start = prepaid.getStartTime();
String end = prepaid.getEndTime();</p>

<p>if(StringUtils.isNotEmpty(start)){</p>

<pre><code>String newstart = start.replaceAll("-", "");
if(newstart.length() &gt; 8){
    newstart = newstart.substring(0, 9);
    prepaid.setStartTime(newstart);
}
</code></pre>

<p>}</p>

<p>// 继续处理结束时间end
{% endhighlight %}</p>

<h3>封装还需要行为</h3>

<p>上面的代码是很常见的处理方式，对象只是传值的作用。给变量封装到方法里边，提供了get/set方法。
本质上来说，就像换了个马甲，和直接暴露数据差不多。类似的代码出现很多，先看下面简单点得例子：
{% highlight java %}
if("1".equals(subs.getStatus())){</p>

<pre><code>     //TODO
</code></pre>

<p>}
{% endhighlight %}
没有行为，顶多算是基于对象的编程。
从行为及职责考虑，这里暴露了状态值1，因为调用方必须理解这个值的作用。
封装，除了封装数据，还得封装出行为的样子来。如：
{% highlight java %}
if(subs.isActive()){</p>

<pre><code>     //TODO
</code></pre>

<p>}
{% endhighlight %}</p>

<p>对于最前面的代码，修改方式有很多，有一种方式就是在set里边, 组装对象的时候调用set方法顺便把格式给处理了。<br/>
没有规定说get.set都会对应一个私有变量，也没有规定get.set要成对出现，如果这是在内部使用的变量，为什么要暴露出来?<br/>
同样除了get/set也没有规定不能提供其他的方法。
{% highlight java %}
void setStartTime(String startTime){</p>

<pre><code>String newstart = startTime;
if(StringUtils.isNotEmpty(startTime)){
    String newstart = startTime.replaceAll("-", "");
    if(newstart.length() &gt; 8){
        newstart = newstart.substring(0, 8);
    }
}
this.startTime = newstart;
</code></pre>

<p>}
{% endhighlight %}</p>

<h3>现实情况</h3>

<p>可惜的是，系统中重要的数据载体是cbo，由工具生成的，类似于vo。所以cbo没什么像样的行为。 <br/>
对于开发java web的同学，习惯cbo,mvc这样的流水线作业，使用面向对象编程，对封装行为并不习惯。<br/>
引用郑大的话:我们需要更好的封装，通常的做法是封装出行为。行为从哪来，从实际需求来。<br/>
所以，还是得在平时工作中有意识、有针对性的实践才行呀!</p>

<p>{% assign series_list = "improve bitter code" %}
{% include series_list.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[improve bitter code: 判空的处理]]></title>
    <link href="http://mccxj.github.com/blog/20120807_improve-bitter-code-8.html"/>
    <updated>2012-08-07T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/improve-bitter-code-8</id>
    <content type="html"><![CDATA[<p><strong>备注: 示例中的代码并不是真实代码的完全拷贝</strong></p>

<h3>预料之外</h3>

<p>预料之外的情况，防御性编程经常会让整洁划一的代码变得混乱。
我们经常会担心各种各样的空值，例如null不行，换成空字符串，集合为空或取不到值，怎么办？
字符串都是空格，要不要trim一下？
往一个很深的属性中取值，判空的逻辑太多了？
{% highlight java %}
if(Objects.isNotEmpty(subs)){</p>

<pre><code>List&lt;Attr&gt; subsAttrs = subs.getAttrs();
if(Objects.isNotEmpty(subsAttrs)){
    for(Attr attr : subsAttrs){
        if(attr != null){
            //do something with attr
        }
    }
}
</code></pre>

<p>}
{% endhighlight %}
诸如此类的情况每天都会出现，的确是很麻烦的。
更多材料可以查看一下<a href="http://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Google Guava关于避免null的描述</a></p>

<h3>用assert减少麻烦</h3>

<p>有一种叫assert的技巧，用来保证参数必须满足一定的先决条件，不满足则无法继续。
这作为和客户端代码之间的协议，即使有异常情况，也应该在客户端先处理好。
当然，assert通常用来防御不正常的调用。以spring这种ioc框架为例，通过get,set无法保证某些必填的值都设对了，
所以在调用业务接口的时候再assert一把。看下面的代码。</p>

<h5>方式1</h5>

<p>{% highlight java %}
public Map queryWokrfResult(String recnum){</p>

<pre><code>Assert.isNotNull(recnum,  "业务流水号不能为空!");
// query with recnum
</code></pre>

<p>}
{% endhighlight %}</p>

<h5>方式2</h5>

<p>{% highlight java %}
public Map queryWokrfResult(String recnum){</p>

<pre><code>if(StringUtils.isEmpty(recnum)){
    throw new ReceptionException("业务流水号不能为空!");
}
// query with recnum
</code></pre>

<p>}
{% endhighlight %}</p>

<p>我是这么看待的，方式1表示你可以传空，但我会做检测，不会让你得逞。相当于防御性编程。
方式2，你就不应该传空，你的参数不符合接口规范。
虽然assert的实现或许就是判断的简单封装，但这里这么不能简单理解。
<strong>assert与其说是编程技巧，不如说是编程模式。</strong></p>

<p>对于java来说，本身是支持assert的，但这个特性一般没人使用。大多数人选择用异常来封装，例如<a href="http://static.springsource.org/spring/docs/1.2.x/api/org/springframework/util/Assert.html">spring assert</a>,<a href="http://commons.apache.org/lang/api/org/apache/commons/lang3/Validate.html">commons-lang validate</a>等都提供了自己的一套assert api。需要注意的时候，assert里边的条件应该都是非常快的，不要把业务逻辑混淆进去。</p>

<h3>封装,封装,由底层处理</h3>

<p>实际上，提供一些工具类(如常用的判空操作和带默认值操作)可以减轻痛苦，
还可以根据具体应用在底层框架上处理，在提高容错性的同时，让代码更优雅。</p>

<p>在项目的老代码中，我们会看到这样的判空处理。
{% highlight java %}
// example 1
MapVo vo = new MapVo();
if(StringUtils.isNotEmpty(name)){</p>

<pre><code>vo.setAttribute("name", name);
</code></pre>

<p>}
if(StringUtils.isNotEmpty(subsid)){</p>

<pre><code>vo.setAttribute("subsid", subsid);
</code></pre>

<p>}
// ... other conditions</p>

<p>DBUtils.queryByVo("queryXXX", vo);
{% endhighlight %}</p>

<p>为什么这么写，是因为框架的sql生成配置只提供了null的配置方式，而不支持常见的空字符串，无内容的字符串等常见模式。
为此，通过增加特性，像ibatis那样支持isEmpty模式的配置，就可以省略大量显式判断。
修改后的代码如下：
{% highlight java %}
// example 2
MapVo vo = new MapVo();
vo.setAttribute("name", name);
vo.setAttribute("subsid", subsid);
// ... other conditions</p>

<p>DBUtils.queryByVo("queryXXX", vo);
{% endhighlight %}</p>

<p>再看，例如老页面jsp里边这样的逻辑也很多(嵌入java代码)
{% highlight java %}
&lt;% Subscriber subs = request.getAttribute("subscriber"); %>
&lt;% if(subs != null) {</p>

<pre><code> out.print("&lt;span&gt;" + subs.getServnumber() + "&lt;/span&gt;");
</code></pre>

<p>&lt;% } %>
{% endhighlight %}
对于这种代码有很好的方式，如el表达式，又或者velocity等模板解决方案，都具有很好的容错性。</p>

<p>再来看看其他语言框架的解决模式，如javascript框架jquery，对错误保护就很好，对不存在的东西，提供了默认行为: 视而不见。
通过基础框架提供的保障，避免一些琐碎的工作，代码可以更关注于逻辑处理。</p>

<h3>空对象模式</h3>

<p><a href="http://www.cs.oberlin.edu/~jwalker/nullObjPattern/">空对象模式</a>就是用一个特殊的对象代替空对象，这个对象和正常对象有着同样的接口，但调用的时候会表现出异常处理逻辑。<a href="http://en.wikipedia.org/wiki/Null_Object_pattern">wiki上有关于这个模式的各种编程语言的描述</a>。
通过这种模式，把异常处理逻辑封装起来，对于客户端代码来说，调用方式和正常情况是一样的。</p>

<p>例如，对于数据查询接口返回空的列表而不是null，使用一些空集合对象。
{% highlight java %}
java.util.Collections#emptyList()
java.util.Collections#emptyMap()
java.util.Collections#emptySet()
{% endhighlight %}
对于返回列表的接口，使用空列表对象，很多判空的逻辑就没有必要存在了。
又例如，返回不可修改或线程安全的特殊列表，也可以看成是这种模式的变化
{% highlight java %}
Arrays#asList()</p>

<p>java.util.Collections#unmodifiableList()
java.util.Collections#unmodifiableMap()
java.util.Collections#unmodifiableSet()</p>

<p>java.util.Collections#synchronizedList()
java.util.Collections#synchronizedMap()
java.util.Collections#synchronizedSet()
{% endhighlight %}</p>

<h3>总结</h3>

<p><strong>对接口进行约定，约束参数和返回值，可以简化判空的处理。</strong></p>

<p><strong>在框架层面进行统一封装，可以专注于业务逻辑。</strong></p>

<p>{% assign series_list = "improve bitter code" %}
{% include series_list.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[improve bitter code: 多掌握一门语言]]></title>
    <link href="http://mccxj.github.com/blog/20120804_improve-bitter-code-7.html"/>
    <updated>2012-08-04T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/improve-bitter-code-7</id>
    <content type="html"><![CDATA[<p><strong>备注: 示例中的代码并不是真实代码的完全拷贝</strong></p>

<h3>语言是有区别的</h3>

<p>语言是有'好坏'之分的，在不同的应用背景下，有些语言就是比其他一些语言更为合适！
语言是有它的设计目的，有些是为了效率(c)，有些是为了快乐编程(ruby)，有些则是了并发做准备(erlang)。
学习不同类型的语言也有助于锻炼编程思维，像c,java,ruby,javascript,erlang都教会了我许多东西。</p>

<p>来到这边之后，主要工作语言是java，但并不是说其他语言没有了用武之地，我一直在寻找使用其他语言的机会。
下面举些例子，来说明一下。由于我以前大量使用ruby语言，的确我也是特别喜欢。
所以例子以ruby为主，但并不是说其他语言没法做到，或许有更好的做法也不一定。</p>

<h5>临时生成xml文件</h5>

<p>前几天维护那边需要我提供一个xml文件，它提供了一组txt数据:每半个小时的登陆及操作统计。
我需要生成一个xml，我不熟悉excel操作(花了几分钟尝试了一下)，所以我选择使用脚本来生成。
脚本只花了一分钟,比我预想得还要顺利。
{% highlight ruby %}
open('a.xml', 'w') do |f|
  open('a.txt', 'r') do |ff|</p>

<pre><code>ff.readlines.each_with_index do |l, i|
  dl, cz = l.split(' ')
  f &lt;&lt; "&lt;data&gt;&lt;seq&gt;#{i+1}&lt;/seq&gt;&lt;czvalue&gt;#{cz}&lt;/czvalue&gt;&lt;dlvalue&gt;#{dl}&lt;/dlvalue&gt;&lt;/data&gt;"
end
</code></pre>

<p>  end
end
{% endhighlight %}
对于这种一次性的文本处理，java真是太繁琐了，没有任何优势可言。</p>

<h5>定位数据问题</h5>

<p>曾经有次上版本之后发现一个菜单树不能使用。通过代码定位应该是菜单出现循环依赖了(菜单在表中是父子关系的)。
同事也把生产的数据拿过来了。数据格式类似下面的，第一列是菜单id，第二列是父菜单id，还有其他的数据列。
{% highlight java %}
ITEM1 ITEM2 OTHERS...
ITEM2 ITEM3 OTHERS...
ITEM4 ITEM2 OTHERS...
ITEM5 ITEM3 OTHERS...
{% endhighlight %}
问题已经变成：父子是否出现循环。当时我用了几分钟写了一段脚本来找到出现循环的菜单项，最后发现是其他项目组增加的菜单有问题。</p>

<h5>传数据的偷懒方法</h5>

<p>以前还是老邮箱的时候，由于网络隔离，需要把测试相关的东西通过邮箱发到测试环境去。
我每次都是这么弄的：通过网页登录邮箱，新建邮件，把已经打包加密好的文件作为附件添加，保存为草稿，退出。
次数多了，真的很无聊，有时候一天要弄好几次。</p>

<p>我知道有种测试方式叫自动化测试，所以我用watir(一个用ruby写的自动化测试框架)模拟了整个过程。后来我把这个脚本调用集成到菜单右键上，
只需要把需要上传的文件选中，再触发一个右键菜单。打包加密，上传文件就搞定了。那时候的感觉就是，世界清净了。</p>

<h5>实现codediff应用</h5>

<p>有些框架工具有非常高的生产效率，ruby on rails就是其中一个。在项目中进行codediff使用的工具，主要是通过这个框架开发的。
说真的，这么一个东西，用java实现也不是什么难事。但对我来说，1k行的ruby代码量，sql一行也没有写，维护上要省心得多。</p>

<p>只要能够对项目有意义，谁会关心我是用什么来实现的呢?</p>

<h5>部署应用</h5>

<p>这是个cmo比较熟悉的领域。大多数情况下，我们会选择bash等shell工具。
不过我在开发codediff工具的时候，我想在本地直接就把应用部署到开发环境上去。</p>

<p>windows的bat很烂，shell等有比较多限制，所以我又选择了脚本语言。
使用perl,ruby等脚本来做管理脚本并不少见，我这里选择一个好几年前写的脚本作为例子：
{% highlight ruby %}
cmd = Proc.new do |shell|
  shell.cd("/opt/xxx")
  print "current directory:",shell.pwd.stdout
  print shell.sh("/opt/getupdate.sh").stdout
  shell.exit
end</p>

<p>Net::SSH.start('192.168.1.32', :username => 'root', :password=>'psword') do |session|
  shell = session.shell.sync
  cmd.call(shell)
end
{% endhighlight %}</p>

<p>上面的例子比较简单，现实的例子是本地打包，通过ftp上传，解压发布，重启服务器，每个步骤都带交互功能。
脚本语言和普通shell相比，具有完整语言和跨平台的优势，用来做系统管理是一个不错的选择。</p>

<h3>多掌握一门语言</h3>

<p>整篇内容没有涉及编程技巧上的东西，但这却是我最想表达的内容。
在这里，我用Martin Fowler中国行的时候，<a href="http://www.ituring.com.cn/article/2083">图灵社区对他的采访内容</a>来结束，
里边有关于学习编程语言建议的内容。</p>

<p><strong><em>图灵社区：您曾经建议过程序员应该每年学习一门编程语言。</em></strong></p>

<p><strong><em>M</em></strong>：这实际上是Pragmatic Programmers提出的建议，是他们出版的书中的一条建议，我本人很赞同。我认为应该有意地学习一些新的语言，特别是那些和你所熟知的语言的运作方式相差甚远的语言，所以不要在相似的语言上浪费时间。如果你是一位Java程序员，那么C#对于你来说就太过熟悉了，你需要学习一些很不同的语言，比如说Lisp，或者Clojure；如果你是一位Lisp程序员，你也不需要学Clojure，因为那就是另一种Lisp而已。总之你应该尝试一些很不同的语言。</p>

<p>{% assign series_list = "improve bitter code" %}
{% include series_list.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[improve bitter code: 对付魔鬼数字]]></title>
    <link href="http://mccxj.github.com/blog/20120731_improve-bitter-code-6.html"/>
    <updated>2012-07-31T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/improve-bitter-code-6</id>
    <content type="html"><![CDATA[<p><strong>备注: 示例中的代码并不是真实代码的完全拷贝</strong></p>

<h3>道高一尺，魔高一丈</h3>

<p>魔鬼数字在项目中大量出现，是代码可读性维护性变差的重要推手。
为了控制事态恶化，项目中加入findbugs，checkstyle等静态检查工具，试图让人自觉修复魔鬼数字这类头疼的问题。</p>

<p>最近在review N项目的代码时，发现有新童鞋对修复checkstyle的问题热情高涨，有些修改的确是有益的，
但是对魔鬼数字的修改就显得不是正路了。大家先看看：
{% highlight java %}
private static final int INT_2 = 2;
private Static final int INT_80 = 80;
private Static final int INT_1000 = 1000;
private Static final int INT_60000 = 60000;
{% endhighlight %}</p>

<p>这种情况以前也出现过，那个时候刚推广checkstyle，结果有人定义了NumberUtil类，里边就有ONE, TWO...等变量，
一直延伸到好几十。这让我非常纠结，劝说了很多次，结果这个类最终还是扎下根来了。我对此深恶痛绝。</p>

<p>今天再次看到这种方式，真是道高一尺魔高一丈呀。我又要发牢骚了。</p>

<h3>认清工具的本质</h3>

<p>这种做法完全就是为了对付checkstyle，而不是对付那对问题代码。工具本来是想提醒程序员，避免写出难以维护的代码。
结果我们更聪明，把代码藏起来，眼不见为净。这样其实是把数字和变量名直接关联起来了，
你能想象一个叫INT_2的变量值确是1么? 如果在不同含义的逻辑里边使用这样一个魔鬼变量，
一旦值发生变化，就会顺带把不应该修改的地方也改动了。</p>

<p>如果我们真的是为了提高自己的编码水平，提高项目的代码质量，就应该认真的对待这些魔鬼数字。
对于魔鬼数字，应该有一个良好的命名，对于经常出现的，还应该找个合适的地方加以管理。接下来以上面的例子继续分析。</p>

<h3>解决魔鬼数字</h3>

<p>要解决魔鬼数字，首先是认清魔鬼数字代表的意义，给它起一个合适的名字。</p>

<p>查看源代码，可以发现，做了下面的代码调整：</p>

<ol>
<li>2是某个值在列表中的位置索引，换成XXX_IDX</li>
<li>80是http的默认端口，换成DEFAULT_HTTP_PROT</li>
<li>1000是用来把秒换成毫秒的，可以用MILLISECONDS_PER_SECOND</li>
<li>60000是默认超时时间来的，换成DEFAULT_TIMEOUT</li>
</ol>


<p>同样，经常会看到魔鬼字符串，"0","1"这样的值出现代码里边，也应该
把给他们起一个好的名字，例如作为执行结果，有SUCCESS、FAILED等。</p>

<h3>更进一步</h3>

<p>需要考虑的还有常量定义的地方，另外考虑使用方法封装来处理魔鬼数字的逻辑。
这样可以隐藏一些细节，把作用域限制在很小的地方。
例如下面经常出现的魔鬼字符串，就可以考虑把整个判断逻辑封装到user类里边去，
而不只是简单的定义出ACTIVE这样一个常量。
{% highlight java %}
// 原有的代码
if("1".equals(user.getStatus())){</p>

<pre><code>// ...
</code></pre>

<p>}</p>

<p>// 改造后,"1"作为user的常量使用于isActive方法
if(user.isActive()){</p>

<pre><code>// ...
</code></pre>

<p>}
{% endhighlight %}</p>

<p>不过话说回来，解决魔鬼数字、字符串之类等'小枝小节'，花费的精力不小。
但不要忽视这些细节，这样可以让自己不断提高对代码的认识，也便于其他人维护你的代码。</p>

<p>对付魔鬼数字，还是不要走捷径的好！</p>

<p>{% assign series_list = "improve bitter code" %}
{% include series_list.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[improve bitter code: 拘泥于单出口方法]]></title>
    <link href="http://mccxj.github.com/blog/20120729_improve-bitter-code-5.html"/>
    <updated>2012-07-29T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/improve-bitter-code-5</id>
    <content type="html"><![CDATA[<p><strong>备注: 示例中的代码并不是真实代码的完全拷贝</strong></p>

<h3>究竟是哪个日期</h3>

<p>前阵子代码评审的时候发现一段代码，逻辑是用于查找一个最大日期，代码逻辑大约是这样的：
如果没有相关的日期记录，则返回当前日期，否则，当日期值为空时，是业务限制异常，并且配置的
相关日期小于当前日期的话，还是应该选择当前日期。代码如下：
{% highlight java %}
public String getPrivMaxDate(){</p>

<pre><code>String currDate = DateUtil.parse(new Date());
String maxDate = currDate;

List&lt;String&gt; privMaxDates = ...; //load data from database
if(Objects.isNotEmpty(privMaxDates)){
    maxDate = privMaxDates.get(0);
    if(StringUtils.isEmpty(maxDate)){
        throw new BusinessException("...");
    }
    else if(maxDate.compareTo(currDate) &lt; 0)
        maxDate = currDate;
    }
}
return maxDate;
</code></pre>

<p>}
{% endhighlight %}</p>

<p>大家应该被我的描述搞晕，我也觉得说得很乱。从代码看，maxDate有好几处地方可以修改，有时候是当前日期，有时候是配置的日期，的确比较乱。
接下来我们尝试对代码进行一些简单的修改，看看效果。</p>

<h3>移动代码，快速逃离</h3>

<p>接下来，我们要做一些小的调整:</p>

<ol>
<li>反转条件，让小逻辑先行，如Objects.isNotEmpty(privMaxDates)的判断</li>
<li>避免修改变量，让代码简单化，如直接使用currDate</li>
<li>throw本身属于返回值的一种，所以在它之后的代码可以简化，例如代码中的else if</li>
</ol>


<p>{% highlight java %}
public String getPrivMaxDate(){</p>

<pre><code>String currDate = DateUtil.parse(new Date());

List&lt;String&gt; privMaxDates = ...; //load data from database
if(Objects.isEmpty(privMaxDates)){
    return currDate;
}

String maxDate = privMaxDates.get(0);
if(StringUtils.isEmpty(maxDate)){
    throw new BusinessException("...");
}

if(maxDate.compareTo(currDate) &lt; 0)
    return currDate;
}
return maxDate;
</code></pre>

<p>}
{% endhighlight %}</p>

<p>经过改造，由于maxDate只赋值一次，代码变得好理解了。</p>

<h3>灵活的结构调整</h3>

<p>借助eclipse提供的重构功能，可以对代码进行调整。对于我们常见的if语句，可以ctrl+1就有很多神奇的提示。
例如if反转，添加else，切换成三元表达式等手法。</p>

<h5>对于if语句里边有很大块的代码，可以考虑使用反转，让另外一个分支先处理。</h5>

<p>例如上面的例子。另外，对有些只有if没有else的代码块，在操作手法上可以先用ctrl+1添加else，再进行反转操作。</p>

<h5>对于很小的if-else语句，可以考虑转换成三元表达式。如下面代码示例</h5>

<p>{% highlight java %}
String forward = null;
if(success){</p>

<pre><code>forward = "success";
</code></pre>

<p>}
else{</p>

<pre><code>forward = "fail";
</code></pre>

<p>}</p>

<p>// or this way
String forward = success ? "success" : "fail";
{% endhighlight %}</p>

<h5>对于存在多次赋值的情况，如果发现已经是最终的返回值，在调整时可以使用return，理清逻辑。</h5>

<p>例如上面的例子。同时，经过分解也便于对复杂的代码进行封装抽取更小的方法。</p>

<p>后话：单赋值还有其他一些好处，例如便于调试定位，
在eralng中所有的变量都是单赋值的，没接触过是很难想象是怎样的一种场景。有兴趣可以去了解一下。</p>

<p>{% assign series_list = "improve bitter code" %}
{% include series_list.html %}</p>
]]></content>
  </entry>
  
</feed>
